AWSTemplateFormatVersion: 2010-09-09

Parameters:
  S3BucketName:
    Type: 'String'
    Description: 'S3 Bucket Name'
  FolderName:
    Type: 'String'
    Description: 'Folder Name'
  PlatformCloudTrailLogGroup:
    Type: 'String'
    Description: 'Name of CloudWatch log group where CloudTrail data is harvested from'
    Default: 'aws-controltower/CloudTrailLogs'
  TargetLogGroup:
    Type: 'String'
    Description: 'Name of CloudWatch log group where CloudTrail data is harvested to'
    Default: 'aws-org-cloudtrail/AWSControlTowerExecution'
  HarvestResourcePrefix:
    Type: 'String'
    Description: 'Prefix name used for all resources in stack related to harvesting AWSControlTowerExecution usage'
    Default: 'platform_control_tower_iam_cloudtrail_harvest'
  ConfigRuleResourcePrefix:
    Type: 'String'
    Description: 'Prefix name used for all resources in stack'
    Default: 'platform_control_tower_iam_deny_config'
  PlatformAlarm:
    Type: 'String'
    Description: 'Name of the Lambda function that triggers the platform alarm'
    Default: 'platform_send_alarm_notification'
  LogGroupRetentionDays:
    Type: 'String'
    Description: 'Retention period in days for the CloudWatch log groups'
    Default: '14'

Resources:
  CloudTrailHarvestLambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${HarvestResourcePrefix}_role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  CloudTrailHarvestLambdaIamPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${HarvestResourcePrefix}_policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:Describe*'
              - 'logs:Get*'
              - 'logs:List*'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'logs:Describe*'
              - 'logs:Filter*'
              - 'logs:Get*'
              - 'logs:List*'
              - 'logs:Start*'
              - 'logs:Stop*'
            Resource:
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:${PlatformCloudTrailLogGroup}*'
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:${TargetLogGroup}*'
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/${HarvestResourcePrefix}*'
          - Effect: 'Allow'
            Action:
              - 'logs:Create*'
              - 'logs:Put*'
              - 'logs:Tag*'
            Resource:
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/${HarvestResourcePrefix}*'
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:${TargetLogGroup}*'
      Roles:
        - !Ref CloudTrailHarvestLambdaIamRole

  CloudTrailHarvestLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 'AWSControlTowerEventsLogGroup'
    Properties:
      FunctionName: !Sub '${HarvestResourcePrefix}_function'
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:
          Fn::Sub:
              - '${releasefolder}/Lambda/platform_control_tower_iam_cloudtrail_harvest.zip'
              - {releasefolder: !Ref FolderName}
      Description: 'Function to harvest CloudTrail events for AWSControlTowerExecution IAM role'
      Handler: 'platform_control_tower_iam_cloudtrail_harvest.lambda_handler'
      MemorySize: 1024
      Role: !GetAtt CloudTrailHarvestLambdaIamRole.Arn
      Runtime: 'python3.10'
      Timeout: 600
      Environment:
        Variables:
          CT_LOG_GROUP_NAME: !Sub '${PlatformCloudTrailLogGroup}'
          CW_LOG_GROUP: !Sub '${TargetLogGroup}'
          CW_LOG_KMS: !GetAtt ControlTowerGuardRailsEncryptionKey.Arn
          PLATFORM_ALARM_ARN: !Sub 'arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${PlatformAlarm}'

  CloudTrailHarvestEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Sub '${HarvestResourcePrefix}_event_rule'
      Description: 'Scheduled rule to trigger CloudTrail harvest for AWSControlTowerExecution IAM role every hour'
      ScheduleExpression: 'cron(5 * * * ? *)'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt CloudTrailHarvestLambdaFunction.Arn
          Id: 'TargetFunctionV1'

  CloudTrailHarvestEventPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref CloudTrailHarvestLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'CloudTrailHarvestEventRule'
          - 'Arn'

  PlatformAlarmFilterPermissions:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !Sub 'arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${PlatformAlarm}'
        Action: 'lambda:InvokeFunction'
        Principal: 'logs.us-east-1.amazonaws.com'
        SourceAccount: !Ref 'AWS::AccountId'
        SourceArn: !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:${TargetLogGroup}:*'

  ControlTowerGuardRailsEncryptionKey:
      Type: 'AWS::KMS::Key'
      Properties:
        Description: 'KMS key to encrypt CloudWatch log groups used as part of Control Tower IAM guardrails'
        Enabled: 'True'
        EnableKeyRotation: 'True'
        KeyPolicy:
          Version: '2012-10-17'
          Id: 'AccountPolicy'
          Statement:
          - Sid: 'EnableIAMUserPermissions'
            Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: 'AllowCloudWatchLogsUsage'
            Effect: 'Allow'
            Principal:
              Service: 'logs.us-east-1.amazonaws.com'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'
            Condition:
              ArnEquals:
                'kms:EncryptionContext:aws:logs:arn':
                  - !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:${TargetLogGroup}*'
                  - !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/${ConfigRuleResourcePrefix}*'
          - Sid: 'AllowPlatformRolesUsage'
            Effect: 'Allow'
            Principal: '*'
            Action:
              - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringLike:
                'aws:PrincipalArn':
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_platform_*'

  ControlTowerGuardRailsEncryptionAlias:
    DependsOn: 'ControlTowerGuardRailsEncryptionKey'
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: 'alias/AWSControlTowerExecutionIamGuardRailsKey'
      TargetKeyId: !Ref 'ControlTowerGuardRailsEncryptionKey'

  AWSControlTowerEventsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: 'ControlTowerGuardRailsEncryptionKey'
    Properties:
      KmsKeyId: !GetAtt ControlTowerGuardRailsEncryptionKey.Arn
      LogGroupName: !Sub '${TargetLogGroup}'
      RetentionInDays: !Ref 'LogGroupRetentionDays'

  ConfigRuleLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: 'ControlTowerGuardRailsEncryptionKey'
    Properties:
      KmsKeyId: !GetAtt ControlTowerGuardRailsEncryptionKey.Arn
      LogGroupName: !Sub '/aws/lambda/${ConfigRuleResourcePrefix}_rule_function'
      RetentionInDays: !Ref 'LogGroupRetentionDays'

  ConfigRuleRemediationLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      KmsKeyId: !GetAtt ControlTowerGuardRailsEncryptionKey.Arn
      LogGroupName: !Sub '/aws/lambda/${ConfigRuleResourcePrefix}_remediation_function'
      RetentionInDays: !Ref 'LogGroupRetentionDays'

  AWSControlTowerExecutionLogSubscription:
    Type: 'AWS::Logs::SubscriptionFilter'
    DependsOn: 'PlatformAlarmFilterPermissions'
    Properties:
      DestinationArn: !Sub 'arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${PlatformAlarm}'
      FilterName: 'platform-control-tower-role-monitoring-filter'
      # This pattern identifies all Access Denied errors that involve the AWSControlTowerExecution IAM role..... OR.... any attempts to update the trust policy on the AWSControlTowerExecution IAM role which would flag a tampering attempt
      FilterPattern: '{(($.errorCode=AccessDenied) && ($.errorMessage=*AWSControlTowerExecution*)) || (($.eventName=UpdateAssumeRolePolicy) && ($.requestParameters.roleName=*AWSControlTowerExecution*))}'
      LogGroupName: !Ref 'AWSControlTowerEventsLogGroup'

  AWSControlTowerExecutionAssumeDenyPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'platform_deny_assume_control_tower_role_policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action: 'sts:AssumeRole'
            Resource: 'arn:aws:iam::*:role/AWSControlTowerExecution'
            Condition:
              ArnNotLike:
                'aws:PrincipalArn':
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_platform_ContributorExternal*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/AWSControlTowerAdmin'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/Azure_DevOps_Master_Role'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/platform_Admin'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/platform_cost_optimization'

  AWSControlTowerExecutionAssumeDenyConfigRule:
    Type: 'AWS::Config::ConfigRule'
    DependsOn: 'PermissionsForConfigToInvokeLambda'
    Properties:
      ConfigRuleName: !Sub '${ConfigRuleResourcePrefix}_rule'
      Description: 'Config rule to ensure that the IAM policy to deny access to the AWSControlTowerExecution IAM role is attached to all non-SSO IAM identities'
      Scope:
        ComplianceResourceTypes:
          - 'AWS::IAM::User'
          - 'AWS::IAM::Role'
      InputParameters: !Join
        - ''
        - - '{"policyArns": "'
          - !Ref AWSControlTowerExecutionAssumeDenyPolicy
          - '"}'
      Source:
        Owner: 'CUSTOM_LAMBDA'
        SourceDetails:
          - EventSource: 'aws.config'
            MessageType: 'ConfigurationItemChangeNotification'
          - EventSource: 'aws.config'
            MessageType: 'ScheduledNotification'
            MaximumExecutionFrequency: 'TwentyFour_Hours'
        SourceIdentifier:
          Fn::GetAtt:
            - ConfigRuleLambdaFunction
            - Arn

  ConfigRuleLambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ConfigRuleResourcePrefix}_rule_role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  ConfigRuleLambdaIamPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${ConfigRuleResourcePrefix}_rule_policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:Create*'
              - 'logs:Put*'
              - 'logs:Tag*'
              - 'logs:Describe*'
              - 'logs:Filter*'
              - 'logs:Get*'
              - 'logs:List*'
            Resource:
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/${ConfigRuleResourcePrefix}*'
          - Effect: 'Allow'
            Action:
              - 'config:PutEvaluations'
              - 'config:ListDiscoveredResources'
              - 'iam:AttachRolePolicy'
              - 'iam:AttachUserPolicy'
              - 'iam:DetachRolePolicy'
              - 'iam:DetachUserPolicy'
              - 'iam:Get*'
              - 'iam:List*'
            Resource: '*'
      Roles:
        - !Ref ConfigRuleLambdaIamRole

  ConfigRuleLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 'ConfigRuleLogGroup'
    Properties:
      FunctionName: !Sub '${ConfigRuleResourcePrefix}_rule_function'
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:
          Fn::Sub:
              - '${releasefolder}/Lambda/platform_control_tower_iam_deny_config_rule.zip'
              - {releasefolder: !Ref FolderName}
      Description: 'Function to for AWS Config rule to check IAM deny policy for AWSControlTowerExecution attached to all non SSO IAM identities'
      Handler: 'platform_control_tower_iam_deny_config_rule.lambda_handler'
      MemorySize: 1024
      Role: !GetAtt ConfigRuleLambdaIamRole.Arn
      Runtime: 'python3.10'
      Timeout: 120

  PermissionsForConfigToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
         Fn::GetAtt:
          - ConfigRuleLambdaFunction
          - Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'config.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  RemediationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 'ConfigRuleRemediationLogGroup'
    Properties:
      FunctionName: !Sub '${ConfigRuleResourcePrefix}_remediation_function'
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:
          Fn::Sub:
              - '${releasefolder}/Lambda/platform_control_tower_iam_deny_remediation.zip'
              - {releasefolder: !Ref FolderName}
      Description: 'Function to remediate IAM identities that do not have the deny policy for AWSControlTowerExecution attached'
      Handler: 'platform_control_tower_iam_deny_remediation.lambda_handler'
      MemorySize: 1024
      Role: !GetAtt ConfigRuleLambdaIamRole.Arn
      Runtime: 'python3.10'
      Timeout: 180
      Environment:
        Variables:
          IAM_POLICY_ARNS: !Ref 'AWSControlTowerExecutionAssumeDenyPolicy'

  ConfigComplianceEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Sub '${ConfigRuleResourcePrefix}_remediation_event_rule'
      Description: !Sub 'This detects Config compliance changes from rule ${ConfigRuleResourcePrefix}_config_rule'
      EventPattern:
        source:
          - 'aws.config'
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - 'config.amazonaws.com'
          eventName:
            - 'PutEvaluations'
          additionalEventData:
            configRuleName:
              - !Ref 'AWSControlTowerExecutionAssumeDenyConfigRule'
          requestParameters:
            evaluations:
              complianceType:
                - 'NON_COMPLIANT'
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "RemediationLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'RemediationLambdaFunction'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'ConfigComplianceEventRule'
          - 'Arn'

