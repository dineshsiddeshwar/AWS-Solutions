Description: Template to create db controls
Parameters:
  S3BucketName:
    MinLength: '1'
    MaxLength: '50'
    Type: String
    Description: CI/CD Release bucket
    ConstraintDescription: Relese S3 Bucket
  FolderName:
    MinLength: '1'
    MaxLength: '50'
    Type: String
    Description: CI/CD Release ID
    ConstraintDescription: ReleaseID
  masteraccount: 
    Type: String
    Description: Master account Id
  auditaccount:
    Type: String
    Description: Audit account Id
  platformagentbucket:
    Type: String
    Description: platform management s3 bucket name
  ScoreCardBucketName:
    Type: String
    Description: enter score card bucket name
  ScoreCardDBTableName:
    Type: String
    Description: Enter a Score card db table name
  platformScoreCardFunctionName:
    Type: String
    Description: Enter ScoreCardVPCBoundLamba name

Resources:
#----------------------------DB Controls Resources Start ---------------------------
#----------------------------ScoreCardGetRegions Lambda---------------------------
  ScoreCardGetRegionsLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardGetRegions.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardGetRegions
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardGetRegions.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardGetRegionsRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardGetRegionsRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardGetRegionsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardGetRegionsPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardGetRegionsPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardGetRegionsPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardGetRegionsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardGetRegions:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1  
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: '*'
            Sid: VisualEditor2
#--------------------------InvokeStepFunctionOrganisationRole--------------------------
  InvokeStepFunctionChildAccountRole:    
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: platform_InvokeStepFunctionChildAccountRole
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                AWS: 
                  - !Sub "arn:aws:iam::${masteraccount}:root"
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - !Ref InvokeStepFunctionChildAccountPolicy
        Tags:
          - Key: platform_donotdelete
            Value: "yes"   

  InvokeStepFunctionChildAccountPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: InvokeStepFunctionChildAccountPolicy
      Path: /
      ManagedPolicyName: InvokeStepFunctionChildAccountPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - rds:DescribeDBClusters
              - rds:DescribeDBInstances
              - states:StartExecution 
              - events:PutRule
              - events:PutTargets
            Resource: '*'
            Sid: VisualEditor2
#----------------------------ScoreCardGetRDSInstances Lambda---------------------------
  ScoreCardGetRDSInstancesLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardGetRDSInstances.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardGetRDSInstances
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardGetRDSInstances.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardGetRDSInstancesRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardGetRDSInstancesRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardGetRDSInstancesRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardGetRDSInstancesPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardGetRDSInstancesPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: DiscoverRDSPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardGetRDSInstancesPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardGetRDSInstances:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor2
#----------------------------ScoreCardGetRDSBySubnet Lambda---------------------------
  ScoreCardGetRDSBySubnetLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardGetRDSBySubnet.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardGetRDSBySubnet
      Environment:
        Variables:
          FUNCTION_NAME: !Ref platformScoreCardFunctionName
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardGetRDSBySubnet.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardGetRDSBySubnetRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardGetRDSBySubnetRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardGetRDSBySubnetRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardGetRDSBySubnetPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardGetRDSBySubnetPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardGetRDSBySubnetPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardGetRDSBySubnetPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardGetRDSBySubnet:*'

            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1 
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor2
          - Effect: Allow
            Action:
              - lambda:GetFunctionConfiguration
              - lambda:InvokeFunction
            Resource: 
              - Fn::Sub:
                  - 'arn:aws:lambda:*:${AWS::AccountId}:function:${functionname}'
                  - {functionname: !Ref platformScoreCardFunctionName}
            Sid: VisualEditor3     
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
            Resource: '*'
            Sid: VisualEditor4 
   
#----------------------------ScoreCardCreateSecretManagerEndpoint Lambda---------------------------
  ScoreCardCreateSecretManagerEndpointLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardCreateSecretManagerEndpoint.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardCreateSecretManagerEndpoint
      Environment:
        Variables:
          FUNCTION_NAME: !Ref platformScoreCardFunctionName
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardCreateSecretManagerEndpoint.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardCreateSecretManagerEndpointRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardCreateSecretManagerEndpointRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardCreateSecretManagerEndpointRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardCreateSecretManagerEndpointPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardCreateSecretManagerEndpointPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardCreateSecretManagerEndpointPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardCreateSecretManagerEndpointPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardCreateSecretManagerEndpoint:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - ec2:CreateSecurityGroup
              - ec2:DescribeSecurityGroups
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateVpcEndpoint
              - ec2:DescribeVpcEndpoints
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateTags
            Resource: '*'
            Sid: VisualEditor2
          - Effect: Allow
            Action:
              - lambda:GetFunctionConfiguration
            Resource: 
              - Fn::Sub:
                  - 'arn:aws:lambda:*:${AWS::AccountId}:function:${functionname}'
                  - {functionname: !Ref platformScoreCardFunctionName}
            Sid: VisualEditor3
#----------------------------ScoreCardDestroySecretManagerEndpoint Lambda---------------------------
  ScoreCardDestroySecretManagerEndpointLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardDestroySecretManagerEndpoint.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardDestroySecretManagerEndpoint
      Environment:
        Variables:
          FUNCTION_NAME: !Ref platformScoreCardFunctionName
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardDestroySecretManagerEndpoint.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardDestroySecretManagerEndpointRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardDestroySecretManagerEndpointRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardDestroySecretManagerEndpointRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardDestroySecretManagerEndpointPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardDestroySecretManagerEndpointPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardDestroySecretManagerEndpointPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardDestroySecretManagerEndpointPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:UpdateFunctionConfiguration
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardDestroySecretManagerEndpoint:*'
              - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:platform_ScoreCardVPCBoundLambda'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - ec2:DescribeVpcEndpoints
              - ec2:DeleteVpcEndpoints
            Resource: '*'
            Sid: VisualEditor2

#----------------------------ScoreCardChangeLambdaVPC Lambda---------------------------
  ScoreCardChangeVPCLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardChangeVPC.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardChangeVPC
      Environment:
        Variables:
          FUNCTION_NAME: !Ref platformScoreCardFunctionName
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardChangeVPC.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardChangeVPCLambdaRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardChangeVPCLambdaRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardChangeVPCRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardChangeVPCLambdaPolicy
      Tags:
        - Key: donotdelete
          Value: "yes"   

  ScoreCardChangeVPCLambdaPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardChangeVPCPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardChangeVPCPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardChangeVPC:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - lambda:GetFunction
            Resource: 
              - Fn::Sub:
                  - 'arn:aws:lambda:*:${AWS::AccountId}:function:${functionname}'
                  - {functionname: !Ref platformScoreCardFunctionName}
            Sid: VisualEditor2
          - Effect: Allow
            Action:
              - ssm:StartAutomationExecution
            Resource:
              - 'arn:aws:ssm:*::automation-definition/*:*' 
            Sid: VisualEditor3
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: 
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/platform_dbcontrols_movevpcrole'
            Sid: VisualEditor4
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor5
          - Effect: Allow
            Action:
              - ec2:DescribeVpcEndpoints
              - ec2:ModifyVpcEndpoint
              - ec2:DescribeSecurityGroups
              - ec2:CreateSecurityGroup
              - ec2:CreateTags
              - ec2:CreateNetworkInterface
            Resource: '*'
            Sid: VisualEditor6  
          - Effect: Allow
            Action:
              - sts:GetCallerIdentity
            Resource: '*'
            Sid: VisualEditor7     
#----------------------------ScorecardCheckVPCChangeStatus Lambda---------------------------
  ScorecardCheckVPCChangeStatusLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardCheckVPCChangeStatus.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardCheckVPCChangeStatus
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardCheckVPCChangeStatus.lambda_handler
      Role:
        Fn::GetAtt:
          - ScorecardCheckVPCChangeStatusLambdaRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScorecardCheckVPCChangeStatusLambdaRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardCheckVPCChangeStatusRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScorecardCheckVPCChangeStatusLambdaPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScorecardCheckVPCChangeStatusLambdaPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScorecardCheckVPCChangeStatusPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardCheckVPCChangeStatusPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardCheckVPCChangeStatus:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1 
          - Effect: Allow
            Action:
              - ssm:DescribeAutomationExecutions
            Resource:
              - '*'
            Sid: VisualEditor2     
#----------------------------ScoreCardGetVPCs Lambda---------------------------
  ScoreCardGetVPCsLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardGetVPCs.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardGetVPCs
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardGetVPCs.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardGetVPCsRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardGetVPCsRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardGetVPCsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardGetVPCsPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardGetVPCsPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardGetVPCsPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardGetVPCsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardGetVPCs:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1 
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor2
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:platform_ScoreCardErrorHandler'
            Sid: VisualEditor3
          
#----------------------------ScoreCardErrorHandler Lambda---------------------------
  ScoreCardErrorHandlerRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardErrorHandlerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardErrorHandlerPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardErrorHandlerPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardErrorHandlerPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardErrorHandlerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardErrorHandler:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - Fn::Sub:
                  - 'arn:aws:iam::${masteraccountid}:role/platform_dynamodb_dbcontrols'
                  - {masteraccountid: !Ref masteraccount}
            Sid: VisualEditor2     
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:ListBucket
            Resource: 
              - Fn::Sub:
                  - 'arn:aws:s3:::${scorecardbucketname}'
                  - {scorecardbucketname: !Ref ScoreCardBucketName}
              - Fn::Sub:
                  - 'arn:aws:s3:::${scorecardbucketname}/*'
                  - {scorecardbucketname: !Ref ScoreCardBucketName}
            Sid: VisualEditor3
          - Effect: Allow
            Action:
              - sts:GetCallerIdentity
            Resource: '*'
            Sid: VisualEditor4
          - Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: 
              - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/*'
            Sid: VisualEditor5
          - Effect: Allow
            Action:
              - ses:SendEmail
            Resource: '*'
            Sid: VisualEditor6
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor7
#----------------------------ScoreCardNonVPCGenerator Lambda---------------------------
  ScoreCardNonVPCGeneratorLambda:    
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_ScoreCardNonVPCGenerator.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_ScoreCardNonVPCGenerator 
      Environment:
        Variables:
          FUNCTION_NAME: !Ref platformScoreCardFunctionName
          DYNAMODB_NAME: !Ref ScoreCardDBTableName
          ACCOUNT_ID: !Ref masteraccount
          SCORECARD_BUCKET_NAME: !Ref ScoreCardBucketName
          QUERY_BUCKET_NAME: !Ref platformagentbucket   
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ScoreCardNonVPCGenerator.lambda_handler
      Role:
        Fn::GetAtt:
          - ScoreCardNonVPCGeneratorRole
          - Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.9

  ScoreCardNonVPCGeneratorRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardNonVPCGeneratorRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardNonVPCGeneratorPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardNonVPCGeneratorPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardNonVPCGeneratorPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardNonVPCGeneratorPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardNonVPCGenerator:*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - Fn::Sub:
                  - 'arn:aws:lambda:*:${AWS::AccountId}:function:${functionname}'
                  - {functionname: !Ref platformScoreCardFunctionName}
            Sid: VisualEditor2
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - Fn::Sub:
                  - 'arn:aws:iam::${masteraccountid}:role/platform_dynamodb_dbcontrols'
                  - {masteraccountid: !Ref masteraccount}
            Sid: VisualEditor3 
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - Fn::Sub:
                  - 'arn:aws:s3:::${querybucketname}'
                  - {querybucketname: !Ref platformagentbucket}
              - Fn::Sub:
                  - 'arn:aws:s3:::${querybucketname}/*'
                  - {querybucketname: !Ref platformagentbucket}
            Sid: VisualEditor4              
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecrets
            Resource: '*'
            Sid: VisualEditor5           
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor6 
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:ListBucket
            Resource: 
              - Fn::Sub:
                  - 'arn:aws:s3:::${scorecardbucketname}'
                  - {scorecardbucketname: !Ref ScoreCardBucketName}
              - Fn::Sub:
                  - 'arn:aws:s3:::${scorecardbucketname}/*'
                  - {scorecardbucketname: !Ref ScoreCardBucketName}
            Sid: VisualEditor7
          - Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: 
              - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/*'
            Sid: VisualEditor8
          - Effect: Allow
            Action:
              - sts:GetCallerIdentity
            Resource: '*'
            Sid: VisualEditor9
#----------------------------ScoreCardVPCBoundLambda Role---------------------------
  ScoreCardVPCBoundLambdaRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_ScoreCardVPCBoundLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref ScoreCardVPCBoundLambdaPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  ScoreCardVPCBoundLambdaPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: ScoreCardVPCBoundLambdaPolicy
      Path: /
      ManagedPolicyName: platform_ScoreCardVPCBoundLambdaPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_ScoreCardVPCBoundLambda:*'
            Sid: VisualEditor0             
          - Effect: Allow
            Action:
              - secretsmanager:ListSecrets
              - secretsmanager:GetSecretValue
            Resource: '*'
            Sid: VisualEditor1          
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
            Resource:
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:db:*'
              - !Sub 'arn:aws:rds:*:${AWS::AccountId}:cluster:*'
            Sid: VisualEditor2
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Sid: VisualEditor3 
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeInstances
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AttachNetworkInterface
              - sts:GetCallerIdentity
            Resource: '*'
            Sid: VisualEditor4
          - Effect: Allow
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
            Sid: VisualEditor5
#----------------------------DBControlsMoveVPC Role ---------------------------
  DBControlsMoveVPCRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_dbcontrols_movevpcrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref DBControlsMoveVPCPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  DBControlsMoveVPCPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: DBControlsMoveVPCPolicy
      Path: /
      ManagedPolicyName: platform_dbcontrols_movevpcrolepolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeVpcs
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
            Resource: '*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - ssm:GetAutomationExecution
              - ssm:StartAutomationExecution
              - lambda:GetFunction
              - lambda:UpdateFunctionConfiguration
              - lambda:GetFunctionConfiguration
            Resource:
              - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:*'
              - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:automation-definition/*:*'
              - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:automation-execution/*'
            Sid: VisualEditor1 
#----------------------------RDS State Machine---------------------------
  RDSDBControlsStateMachine:    
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionS3Location: 
        Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        Key:
          Fn::Sub:
            - "${releasefolder}/RDSStateMachine.json"
            - {releasefolder: !Ref FolderName}
      RoleArn: 
        Fn::GetAtt:
          - RDSDBControlsStateMachineRole
          - Arn
      StateMachineName: platform_RDSDBControlsStateMachine
      StateMachineType: STANDARD
      DefinitionSubstitutions:
        account_number: !Ref "AWS::AccountId"
        account_region: !Ref "AWS::Region"
      Tags:
        - Key: platform_donotdelete
          Value: 'yes'

  RDSDBControlsStateMachineRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_RDSDBControlsStateMachineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref RDSDBControlsStateMachinePolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  RDSDBControlsStateMachinePolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: RDSDBControlsStateMachinePolicy
      Path: /
      ManagedPolicyName: platform_RDSDBControlsStateMachinePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogDelivery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
            Resource: '*'
            Sid: VisualEditor0
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'
            Sid: VisualEditor1  
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:StartExecution
              - states:StopExecution
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
            Resource: '*'
            Sid: VisualEditor2

  RDSDBControlsStateMachineSchedule:    
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: RDSStepFunctionsEventSchedule
      Description: 'Scheduled Rule for once in every month on 25th Ex - Tue, 25 Apr 2023 08:00:00 (UTC +05:30)' 
      ScheduleExpression: 'cron(0 1 25 * ? *)'
      FlexibleTimeWindow:
        Mode: 'OFF'
      State: 'ENABLED'
      Target: 
        Arn: !GetAtt RDSDBControlsStateMachine.Arn
        RoleArn:
          Fn::GetAtt:
            - RDSDBControlsStateMachineScheduleRole
            - Arn

  RDSDBControlsStateMachineScheduleRole:    
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: platform_RDSDBControlsStateMachineSchedulerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref RDSDBControlsStateMachineSchedulerPolicy
      Tags:
        - Key: platform_donotdelete
          Value: "yes"   

  RDSDBControlsStateMachineSchedulerPolicy:    
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: RDSDBControlsStateMachineSchedulerPolicy
      Path: /
      ManagedPolicyName: platform_RDSDBControlsStateMachineSchedulerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:platform_RDSDBControlsStateMachine'
            Sid: VisualEditor0

#----------------------------DB Controls Resources End ---------------------------