AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to configure a target account for a scheduled multi-account and multi-region Automation patching operation.
Parameters:
  S3BucketName:
    Type: String
    Description: S3 Bucket Name
  FolderName:
    Type: String
    Description: Folder Name
  ExecutionLogsS3BucketPrefix :
    Type : 'String'
    Description: 'Name of the prefix to use in the central account S3 bucket for inventory execution data.'
    Default: 'inventory-execution-logs'
  ResourceDataSyncName :
    Type : 'String'
    Description: 'Name for the Resource Data Sync.'
    Default: 'InventoryData'
  PatchingTemplateStackAccountId:  
    Type : 'String'
    Description: 'The account ID of the patching template.'    
  ExecutionLogsBucketName:
    Type : 'String'
    Description: 'The name of the S3 bucket used to store execution logs centrally.'
  ResouceSyncBucketName:
    Type : 'String'
    Description: 'The name of the S3 bucket used to store resource data sync details'
  PatchingTemplateStackRegion:
    Type : 'String'
    Description: 'The region of the patching template.'
  ManagedInstanceDataEncryptionKey:
    Type : 'String'
    Description: 'The ARN of the KMS key used to encrypt resource data sync logs'
  BaselineOverrideBucket:
    Type : 'String'
    Description: The ARN of the S3 bucket used to store patch baseline override list.
  ServiceCatalogLaunchRoleName:
    Type : 'String'
    Description: The name of the Service Catalog launch role
  CronValue:
    Type : 'String'
    Description: cron of the patching window.
  MasterAccountId:
    Type : 'String'
    Description: payer account id

Conditions:
  CreateResources: !Equals [!Ref 'AWS::Region', !Ref PatchingTemplateStackRegion]

Resources:
# Operation wait function
  AWSLambdaPatchingWaitRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub platform-AWS-Patching-Wait-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WaitLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/python.zip"
              - {releasefolder: !Ref FolderName}
      Description: Wait Lambda Function - Lambda Layer for Requests module
      LayerName: platform_patching_wait_lambda_layer

  WaitLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Lambda function to Sleep for 10 minutes
      Code:
        S3Bucket:
          Fn::Sub:
            - "${S3BucketName}${AWS::Region}"
            - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
            - "${releasefolder}/platform_patching_wait_function.zip"
            - {releasefolder: !Ref FolderName}
      FunctionName: platform_patching_wait_function
      Layers:
        - !Ref WaitLambdaLayer
      Tags:
        - Value: 'yes'
          Key: platform_donotdelete
      Handler: platform_patching_wait_function.lambda_handler
      Role: !GetAtt AWSLambdaPatchingWaitRole.Arn
      MemorySize: 256
      Timeout: 650
      Runtime: python3.8

  CallWaitLambda:
    Type: 'Custom::WaitLambda'
    Properties:
      ServiceToken: !GetAtt WaitLambda.Arn

# Requests layer
  CrHelperLambdaLayer:
    Condition: CreateResources
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/crhelper.zip"
              - {releasefolder: !Ref FolderName}
      Description: Lambda Layer for crHelper module
      LayerName: platform_crhelper_patching_lambdas_layer

# Reporting resources
  InventoryAssociation:
    # Condition: CreateResources # per region
    Type: AWS::SSM::Association
    Properties:
      AssociationName: Inventory-Association
      Name: AWS-GatherSoftwareInventory
      ScheduleExpression: "cron(0 6 * * ? *)"
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref ExecutionLogsBucketName
          OutputS3KeyPrefix: !Join [ '', [!Ref ExecutionLogsS3BucketPrefix, '/', 'accountid=', !Ref 'AWS::AccountId', '/', 'region=', !Ref 'AWS::Region'] ]
      Targets:
      - Key: InstanceIds
        Values:
        - "*"
      Parameters: 
        applications: 
          - "Enabled"
        awsComponents: 
          - "Enabled"
        files:
          - ""
        networkConfig: 
          - "Enabled"
        windowsUpdates: 
          - "Enabled"
        instanceDetailedInformation: 
          - "Enabled"
        services: 
          - "Enabled"
        windowsRegistry:
          - ""
        windowsRoles: 
          - "Enabled"
        customInventory:
          - "Enabled"
        billingInfo: 
          - "Enabled"
          
  ResourceDataSync:
    # Condition: CreateResources # per region
    Type: AWS::SSM::ResourceDataSync
    Properties: 
      SyncName: !Ref ResourceDataSyncName
      S3Destination:
        BucketName: !Ref ResouceSyncBucketName
        BucketRegion: !Ref PatchingTemplateStackRegion
        KMSKeyArn: !Ref ManagedInstanceDataEncryptionKey
        SyncFormat: 'JsonSerDe'

## Service catalog lambdas
# Maintenance window role
  AWSMwRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      RoleName: platform-AWS-MW-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: InvokeFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - lambda:InvokeFunction
              Resource: 
                - !GetAtt MaintenanceWindowTaskFunction.Arn 
                - !GetAtt MaintenanceWindowASGTaskFunction.Arn 

# Service Catalog launch role
  ServiceCatalogLaunchRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ServiceCatalogLaunchRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - servicecatalog.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Description: Role created to launch SC products
      Policies:
        - PolicyName: SCLaunchPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "*"
                Condition:
                  StringEquals:
                    's3:ExistingObjectTag/servicecatalog:provisioning': 'true'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt MaintenanceWindowTaggingFunction.Arn
                  - !GetAtt MaintenanceWindowCreationFunction.Arn
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:UpdateStack'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/SC-${AWS::AccountId}-pp-*'
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStackEvents'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:GetTemplateSummary'
                  - 'cloudformation:ValidateTemplate'
                Resource: '*'

# Maintenance window creation lambda
  AWSLambdaMwRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      RoleName: platform-AWS-Lambda-MW-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowMW
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssm:*MaintenanceWindow*
              Resource: '*'
        - PolicyName: AllowPassRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - iam:PassRole
              Resource: !GetAtt AWSMwRole.Arn

  MaintenanceWindowCreationFunction:
    Condition: CreateResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_maintenance_window_creation.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_maintenance_window_creation
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_maintenance_window_creation.lambda_handler
      Environment:
        Variables:
          MW_TASK_LAMBDA_ARN: !GetAtt MaintenanceWindowTaskFunction.Arn
          MW_ASG_TASK_LAMBDA_ARN: !GetAtt MaintenanceWindowASGTaskFunction.Arn
          SERVICE_ROLE_ARN: !GetAtt AWSMwRole.Arn
          PATCHING_TEMPLATE_REGION: !Ref PatchingTemplateStackRegion
      Role: !GetAtt AWSLambdaMwRole.Arn
      Layers:
        - !Ref CrHelperLambdaLayer      
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8

# EC2 tagging lambda
  AWSLambdaTaggingRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      RoleName: platform-AWS-Lambda-Tagging-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowTag
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateTags
              - ssm:GetParameter
              - autoscaling:CreateOrUpdateTags
              - autoscaling:DeleteTags
              Resource: '*'

  MaintenanceWindowTaggingFunction:
    Condition: CreateResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_maintenance_window_tagging.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_maintenance_window_tagging
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_maintenance_window_tagging.lambda_handler
      Role: !GetAtt AWSLambdaTaggingRole.Arn
      Layers:
        - !Ref CrHelperLambdaLayer 
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8

## Maintenance window task lambdas
  AWSLambdaSSMRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      RoleName: platform-AWS-Lambda-SSM-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
      Policies:
        - PolicyName: SSMDocInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssm:StartAutomationExecution
              Resource:
                - Fn::Sub: 
                  - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${StandaloneEC2PatchDocument}:$DEFAULT
                  - {StandaloneEC2PatchDocument: !Ref StandaloneEC2PatchDocument}
                - Fn::Sub: 
                  - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${ASGEC2PatchDocument}:$DEFAULT
                  - {ASGEC2PatchDocument: !Ref ASGEC2PatchDocument}
        - PolicyName: PassSSMRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action: iam:PassRole
              Resource:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-AutomationAdministrationRolePatching
              Effect: Allow
        - PolicyName: LogsCreation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action: logs:CreateLogGroup
              Resource:
                Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              Effect: Allow
            - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
                Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_maintenance_window_task:*
                Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/platform_maintenance_window_asg_task:*
              Effect: Allow
        - PolicyName: UpdateCreateSGs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action: 
              - ec2:CreateSecurityGroup
              - ec2:AuthorizeSecurityGroupEgress
              Resource: '*'
              Effect: Allow
        - PolicyName: GetSSMParameter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssm:GetParameter
              Resource: '*'                    

# Standalone EC2 task lambda
  MaintenanceWindowTaskFunction:
    Condition: CreateResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_maintenance_window_task.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_maintenance_window_task
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_maintenance_window_task.lambda_handler
      Environment:
        Variables:
          ADMINISTRATION_ROLE_NAME: !Ref AutomationAdministrationServiceRole
          EXECUTION_ROLE_NAME: !Ref AutomationExecutionServiceRole
          DOCUMENT_NAME: !Ref StandaloneEC2PatchDocument
      Role: !GetAtt AWSLambdaSSMRole.Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8

# ASG EC2 task lambda
  MaintenanceWindowASGTaskFunction:
    Condition: CreateResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_maintenance_window_asg_task.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_maintenance_window_asg_task
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_maintenance_window_asg_task.lambda_handler
      Environment:
        Variables:
          ASG_UPDATE_LAMBDA_NAME: !Ref UpdateASGFunction 
          ASG_EXECUTION_ROLE_NAME: !Ref AutomationAdministrationServiceRole
          ASG_DOCUMENT_NAME: !Ref ASGEC2PatchDocument
          PROFILE_ROLE_NAME: 'platform_service_instance'
          ADMINISTRATION_ROLE_NAME: !Ref AutomationAdministrationServiceRole
          EXECUTION_ROLE_NAME: !Ref AutomationExecutionServiceRole
          DOCUMENT_NAME: !Ref StandaloneEC2PatchDocument
          PATCHING_TEMPLATE_REGION: !Ref PatchingTemplateStackRegion
      Role: !GetAtt AWSLambdaSSMRole.Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8

## SSM documents resources
# SSM execution roles
  AutomationExecutionServiceRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
            AWS: 
            - !Join [ '', ['arn:aws:iam::', !Ref PatchingTemplateStackAccountId, ':root'] ]
            - !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Path: "/"
      RoleName: !Sub platform_SystemsManager-AutomationExecutionRole-${AWS::AccountId}
      Policies:
        - PolicyName: passRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - iam:PassRole
              Resource: 
              - !Join [ '', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/platform_SystemsManager-AutomationExecutionRole-', !Ref 'AWS::AccountId'] ]
              - !Join [ '', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/platform_service_instance'] ]
        - PolicyName: getTagPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - tag:GetResources
              Resource: "*"
        - PolicyName: listResourceGroupResourcesPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - resource-groups:listGroupResources
              Resource: "*"
        - PolicyName: invokeASGupdateLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - lambda:InvokeFunction
              Resource: 
                - !Join [ '', ['arn:aws:lambda:*:', !Ref 'AWS::AccountId', ':function:platform_update_asg'] ]
        - PolicyName: describeInstanceRefresh
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:DescribeInstanceRefreshes
              - autoscaling:DescribeInstanceRefreshes
              Resource: "*"
        - PolicyName: S3Actions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${BaselineOverrideBucket}/*
                                
  AutomationAdministrationServiceRole:
    Condition: CreateResources
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-SystemsManager-AutomationAdministrationRolePatching
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AssumeRole-AWSSystemsManagerAutomationExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource:
                Fn::Sub: arn:${AWS::Partition}:iam::*:role/platform_SystemsManager-AutomationExecutionRole-${AWS::AccountId}
            - Effect: Allow
              Action:
                - organizations:ListAccountsForParent
              Resource:
                - "*"
        - PolicyName: S3Actions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${BaselineOverrideBucket}/*

# Standalone EC2 SSM patching document
  StandaloneEC2PatchDocument:
    Condition: CreateResources
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Automation
      Content:
        description: >-
          **Description**
          
          This document runs the Command document ```AWS-RunPatchBaseline``` on the specified instances.
        schemaVersion: '0.3'
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole: 
            type: String
            description: The ARN of the Automation service role to assume.
          Operation:
            type: String
            default: Scan
            description: >-
              (Required) The update or configuration to perform on the instance. The
              system checks if patches specified in the patch baseline are installed on
              the instance. The install operation installs patches missing from the
              baseline.
          RebootOption:
            type: String
            default: RebootIfNeeded
            description: >-
              (Optional) Reboot behavior after a patch Install operation. If you choose
              NoReboot and patches are installed, the instance is marked as non-compliant 
              until a subsequent reboot and scan.
          InstallOverrideList:
            type: String
            default: ""
            description: >-
              (Optional) An https URL or an Amazon S3 path-style URL to the list of patches to be installed. This patch installation list overrides the patches specified by the default patch baseline.
          SnapshotId:
            type: String
            default: ""
            description: >-
              (Optional) The snapshot ID to use to retrieve a patch baseline snapshot.
          MaximumConcurrency:
            type: String
            default: 10%
            description: >-
              (Optional) Specify the number or percentage of targets on which to execute the task at the same time. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 10%.    
          MaximumErrors:
            type: String
            default: 10%
            description: >-
              (Optional) The number of errors that are allowed before the system stops initiating the automation on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. The default value is 10%.
          ResourceGroupKey:
            type: String
            description: >-
              Enter a resource group that includes the resources you want to target. Important: The Resource Group name is case sensitive.
            default: 'tag:platform_maintenance_window'
          ResourceGroupName:
            type: String
            description: >-
              Enter a resource group that includes the resources you want to target. Important: The Resource Group name is case sensitive.
            default: Default_maintenance_window
        mainSteps:
          - name: runPatchBaseline
            action: 'aws:runCommand'
            timeoutSeconds: 7200
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunPatchBaseline
              Targets:
              - Key: '{{ ResourceGroupKey }}'
                Values:
                  - '{{ ResourceGroupName }}'
              Parameters:
                Operation: '{{ Operation }}'
                RebootOption: '{{ RebootOption }}'
                InstallOverrideList: '{{ InstallOverrideList }}'
                SnapshotId: '{{ SnapshotId }}'
              OutputS3BucketName: !Ref ExecutionLogsBucketName
              OutputS3KeyPrefix: 'patching/accountid={{global:ACCOUNT_ID}}/region={{global:REGION}}/executionid={{automation:EXECUTION_ID}}'
              MaxConcurrency: '{{ MaximumConcurrency }}'
              MaxErrors: '{{ MaximumErrors }}'
            description: >-
              This command runs the Command document ```AWS-RunPatchBaseline``` on the
              specified instances.

# ASG EC2 SSM patching document
  ASGEC2PatchDocument:
    Condition: CreateResources 
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Automation
      Content:
        description: Systems Manager Automation Demo - Patch AMI and Update ASG
        schemaVersion: '0.3'
        assumeRole: '{{ automationAssumeRole }}'
        outputs:
          - createImage.ImageId
        parameters:
          subnetId:
            description: The SubnetId where the instance is launched from the sourceAMIid.
            type: String
          instancesEnvironmentTag:
            description: if to refresh instances whith bew launch config.
            type: String
          sourceAMIid:
            description: AMI to patch
            type: String
          targetASG:
            description: Auto Scaling group to Update
            type: String
          retainHealthyPercentage:
            description: instances healthy percentage retaintion.
            type: String
          securitygroupId:
            description: security group for the intermediate instance
            type: StringList
          updateASGLambdaName:
            description: The name of the update ASG function.
            type: String
          targetAMIname:
            default: 'patchedAMI-{{global:DATE_TIME}}'
            description: Name of new AMI
            type: String
          installOverrideList:
            default: ''
            description: (Optional) An https URL or an Amazon S3 path-style URL to the list of patches to be installed. This patch installation list overrides the patches specified by the default patch baseline.
            type: String
          instanceProfileRoleName:
            description: The name of the instance profile role to assume.
            type: String
          automationAssumeRole:
            description: The ARN of the Automation service role to assume.
            type: String
          refreshASGInstances:
            description: if to refresh instances whith bew launch config.
            type: String
        mainSteps:
          - maxAttempts: 1
            inputs:
              IamInstanceProfileName: '{{ instanceProfileRoleName }}'
              MaxInstanceCount: 1
              TagSpecifications:
                - ResourceType: instance
                  Tags:
                    - Value: '{{ instancesEnvironmentTag }}'
                      Key: PatchGroup
              ImageId: '{{ sourceAMIid }}'
              SubnetId: '{{ subnetId }}'
              InstanceType: m3.large
              SecurityGroupIds: '{{ securitygroupId }}'
              MinInstanceCount: 1
            name: startInstances
            action: 'aws:runInstances'
            timeoutSeconds: 1200
            onFailure: Abort
          - maxAttempts: 1
            inputs:
              Parameters:
                InstallOverrideList: '{{ installOverrideList }}'
                Operation: Install
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
              DocumentName: AWS-RunPatchBaseline
            name: runPatchBaseline
            action: 'aws:runCommand'
            onFailure: Abort
          - maxAttempts: 1
            inputs:
              DesiredState: stopped
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
            name: stopInstance
            action: 'aws:changeInstanceState'
            onFailure: Abort
          - maxAttempts: 1
            inputs:
              ImageName: '{{ targetAMIname }}'
              InstanceId: '{{ startInstances.InstanceIds }}'
              ImageDescription: AMI created by EC2 Automation
              NoReboot: true
            name: createImage
            action: 'aws:createImage'
            onFailure: Abort
          - maxAttempts: 1
            inputs:
              DesiredState: terminated
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
            name: terminateInstance
            action: 'aws:changeInstanceState'
            onFailure: Abort
          - maxAttempts: 1
            inputs:
              FunctionName: '{{ updateASGLambdaName }}'
              Payload: '{"targetASG":"{{targetASG}}", "newAmiID":"{{createImage.ImageId}}", "retainHealthyPercentage":"{{retainHealthyPercentage}}", "refreshASGInstances":"{{refreshASGInstances}}" }'
            name: updateASG
            action: 'aws:invokeLambdaFunction'
            timeoutSeconds: 1200
            onFailure: Abort
            nextStep: StepSelection
          - maxAttempts: 1
            inputs:
              Choices:
                - NextStep: waitForRefreshAction
                  Variable: '{{refreshASGInstances}}'
                  EqualsIgnoreCase: 'Yes'
            name: StepSelection
            action: 'aws:branch'
            timeoutSeconds: 600
            onFailure: Abort
            isEnd: true
          - inputs:
              PropertySelector: '$.InstanceRefreshes[0].Status'
              DesiredValues:
                - Successful
              AutoScalingGroupName: '{{ targetASG }}'
              Service: autoscaling
              Api: DescribeInstanceRefreshes
            name: waitForRefreshAction
            action: 'aws:waitForAwsResourceProperty'
            timeoutSeconds: 2000
            onFailure: Continue
            nextStep: scan
          - maxAttempts: 1
            inputs:
              Parameters:
                InstallOverrideList: '{{ installOverrideList }}'
                Operation: Scan
              Targets:
                - Values:
                    - '{{ targetASG }}'
                  Key: 'tag:aws:autoscaling:groupName'
              DocumentName: AWS-RunPatchBaseline
            name: scan
            action: 'aws:runCommand'
            onFailure: Continue

# Update ASG lambda
  AWSLambdaASGUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub platform-AWS-ASG-Update-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  UpdateASGFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_update_asg.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_update_asg
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_update_asg.lambda_handler
      Role: !GetAtt AWSLambdaASGUpdateRole.Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8

## Config rule resources
# Patch tag monitoring config rule 
  EC2TagMonitoringConfigRule:
    DependsOn: CallWaitLambda
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: platform_instances_tags
      Description: >-
        Checks whether your resources have the tags that you specify.
      InputParameters:
        tag1Key: platform_maintenance_window
        tag1Value: Dev_maintenance_window,Test_maintenance_window,Prod_maintenance_window,Default_maintenance_window
        tag2Key: PatchGroup
        tag2Value: Dev,Test,Prod,Default
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::Instance'
          - 'AWS::AutoScaling::AutoScalingGroup'
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
    
# Event bridge rule for invoking Lambda
  EC2TagMonitoringEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "If tag is not attached to perticular Ec2 Instnace or ASG then EventRule will invoke lambda to attached specific tags"
      EventPattern:
          {
                "detail-type": ["Config Rules Compliance Change"],
                "source": ["aws.config"],
                "detail": {
                  "configRuleName": ["platform_instances_tags"],
                  "messageType": ["ComplianceChangeNotification"]
                }
              }
      State: "ENABLED"
      Targets: 
        - Arn:  
              Fn::GetAtt:
                - "TagMonitoringFunction"
                - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref TagMonitoringFunction  
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EC2TagMonitoringEventRule"
          - "Arn"
      
# Tag monitoring function
  AWSLambdaTagMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub platform-AWS-Lambda-Tag-Monitoring-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - ssm.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowTag
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateTags
              - ssm:GetParameter
              - autoscaling:CreateOrUpdateTags
              - autoscaling:DeleteTags
              Resource: '*'
        - PolicyName: AllowMW
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssm:*MaintenanceWindow*
              Resource: '*'              

  TagMonitoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_ec2_tag_monitoring.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_ec2_tag_monitoring
      Environment:
        Variables:      
          PATCHING_TEMPLATE_REGION: !Ref PatchingTemplateStackRegion
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_ec2_tag_monitoring.lambda_handler
      Role: !GetAtt AWSLambdaTagMonitoringRole.Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8
      
  PatchInstanceMetadataRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub platform_patch_instance_metadata_role_${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowTag
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - ssm:GetParameter
              - ssm:Describe*
              - ssm:List*
              - ssm:Get*
              - sqs:SendMessage
              - ec2:DescribeInstances
              Resource: '*'
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: '*'

  PatchInstanceMetadataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
              - "${S3BucketName}${AWS::Region}"
              - {S3BucketName: !Ref S3BucketName}
        S3Key:
          Fn::Sub:
              - "${releasefolder}/platform_patch_instance_metadata.zip"
              - {releasefolder: !Ref FolderName}
      FunctionName: platform_patch_instance_metadata
      Environment:
        Variables:      
          ACCOUNT_ID: !Sub ${MasterAccountId}
          REGION: !Sub ${AWS::Region}
      Tags:
        - Value: "yes"
          Key: platform_donotdelete
      Handler: platform_patch_instance_metadata.lambda_handler
      Role: !GetAtt PatchInstanceMetadataRole.Arn
      Timeout: 900
      MemorySize: 128
      Runtime: python3.8

  PatchInstanceMetadataScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: platform_patch_instance_metadata
      Description: "Scheduled twice a month"
      ScheduleExpression: "cron(0 11 13,25 * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt PatchInstanceMetadataFunction.Arn
          Id: "TargetFunctionV1"

  PermissionForPatchInstanceMetadatascheduler:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PatchInstanceMetadataFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "PatchInstanceMetadataScheduledRule"
          - "Arn"

## Default maintenance window resources
# Default maintenance window
  DefaultMaintenanceWindow:
    Condition: CreateResources    
    Type: AWS::SSM::MaintenanceWindow
    Properties: 
      AllowUnassociatedTargets: true
      Cutoff: 1
      Description: 'Default Maintenance Window'
      Duration: 6
      Name: Default_maintenance_window
      Schedule: !Sub ${CronValue}


# Default maintenance window standalone EC2 task
  DefaultMaintenanceWindowTask:        
    Condition: CreateResources
    Type: AWS::SSM::MaintenanceWindowTask
    Properties: 
      Priority: 1
      ServiceRoleArn: !GetAtt AWSMwRole.Arn
      TaskArn: !GetAtt MaintenanceWindowTaskFunction.Arn
      TaskInvocationParameters: 
        MaintenanceWindowLambdaParameters:
          Payload: 
            Fn::Base64: |
              {
                "env": "Default",
                "patching_operation": "Install",
                "operation_post_patching": "RebootIfNeeded",
                "run_patch_baseline_install_override_list": ""                            
              }
      TaskType: LAMBDA
      WindowId: !Ref DefaultMaintenanceWindow

# Default maintenance window ASG EC2 task
  DefaultMaintenanceWindowASGTask:     
    Condition: CreateResources
    Type: AWS::SSM::MaintenanceWindowTask
    Properties: 
      Priority: 1
      ServiceRoleArn: !GetAtt AWSMwRole.Arn
      TaskArn: !GetAtt MaintenanceWindowASGTaskFunction.Arn
      TaskInvocationParameters: 
        MaintenanceWindowLambdaParameters:
          Payload:
            Fn::Base64: |
              {
                "env": "Default",
                "retain_healthy_percentage": "90",
                "refresh_asg_instances": "Yes",
                "patching_operation": "Install",
                "run_patch_baseline_install_override_list": ""                            
              }
      TaskType: LAMBDA
      WindowId: !Ref DefaultMaintenanceWindow

## Patching baseline setting
  WindowsPatchBaseline:
    Type: AWS::SSM::PatchBaseline
    Properties:
      Name: WindowsOS
      Description: Baseline containing all updates approved for Windows Dev instances
      OperatingSystem: WINDOWS
      PatchGroups:
      - Dev
      - Test
      - Prod
      - Default
      ApprovalRules:
        PatchRules:
        - PatchFilterGroup:
            PatchFilters:
            - Values:
              - Critical
              - Important
              Key: MSRC_SEVERITY
            - Values:
              - SecurityUpdates
              - CriticalUpdates
              Key: CLASSIFICATION
            - Values:
              - WindowsServer2012
              - WindowsServer2012R2
              - WindowsServer2016
              - WindowsServer2019
              - WindowsServer2022
              Key: PRODUCT
          ApproveAfterDays: 7
          ComplianceLevel: CRITICAL

  LinuxOSBaseline:
    Type: AWS::SSM::PatchBaseline
    Properties:
      Name: LinuxOS
      Description: Baseline containing all updates approved for amazonLinux instances
      OperatingSystem: AMAZON_LINUX_2
      PatchGroups:
      - Dev
      - Test
      - Prod
      - Default
      ApprovalRules:
        PatchRules:
        - PatchFilterGroup:
            PatchFilters:
            - Values:
              - Critical
              - Important
              Key: SEVERITY
            - Values:
              - Bugfix
              - Security
              Key: CLASSIFICATION
          ApproveAfterDays: 7
          ComplianceLevel: CRITICAL

  RedHatLinuxOSBaseline:
    Type: AWS::SSM::PatchBaseline
    Properties:
      Name: RedHatLinuxOS
      Description: Baseline containing all updates approved for amazonLinux instances
      OperatingSystem: REDHAT_ENTERPRISE_LINUX
      PatchGroups:
      - Dev
      - Test
      - Prod
      - Default
      ApprovalRules:
        PatchRules:
        - PatchFilterGroup:
            PatchFilters:
            - Values:
              - Critical
              - Important
              Key: SEVERITY
            - Values:
              - Bugfix
              - Security
              Key: CLASSIFICATION
          ApproveAfterDays: 7
          ComplianceLevel: CRITICAL

  UbuntuOSBaseline:
    Type: AWS::SSM::PatchBaseline
    Properties:
      Name: UbuntuOS
      Description: Baseline containing all updates approved for amazonLinux instances
      OperatingSystem: UBUNTU
      PatchGroups:
      - Dev
      - Test
      - Prod
      - Default
      ApprovalRules:
        PatchRules:
        - PatchFilterGroup:
            PatchFilters:
            - Values:
              - Required
              - Important
              - Standard
              Key: PRIORITY
            - Values:
              - All
              Key: SECTION
          ApproveAfterDays: 7
          ComplianceLevel: CRITICAL
