#################Jenkins-build#######################

-> Once production release done , then we need to update all env with up-to-date of prod relase version

-> first in test -> uat -> prod :- everything up-to-date, Eg:- first in either uat/test if everything fine then we move to prod

Eg:- If hotf-x-48 we are releasing newly in tets/uat & apart from that fr-27 is also releasing, then we need to merge the fr-27 branch with master branch 
when it moves for prod release

-> Proform:- will be having UI build, Maven build (for war file craetions) , Gradle build(For jar file creations).All war files will have
dependencies so we will be craetion from same repo

-> proform-scheduler service will watch the database , if somebody updates their job/name and so on. once we check for those values scheduler will check
in database and it will watch for some msg in SQS(queue) and read and then it will take from database and it will put in efs storage.

-> UserIndexing only for purpose of seraching the profiles using scheduler. (path:- efs/uat/proform/UserIndexFolder) there will find Luca Index where 
scheduler will read the files of encrypted form/non-human readable form.

-> If we clear temp files without undeploying scheduler war file from C-server, then service wildfly wont start, so we need to go to path mentioned below
 /opt/wildfly/standalnoe/configuration/standalone.xml, go to end of file and remove the 3 lines from deployment code braces.

-> Build process ->  SDLC cycles and environment -> process wheer we will deploy the code that is committed by developers and build it acc. to environment. 

--> In build process usually we have two UI builds, one is dev & other is prod. (angualr have two diff builds) -> If developer wants to do entire trace 
of build , we need to take dev as angular build, for analysing issues with respective to developers.

--> In prod build , we cannot see full trace of build logs, bcoz while building it will compress the files

-> Proform-OAuth:- In ejnkins, we have job Proform-OAuth , sidebar:- build-numbertrack-sheet & project is aparametrized as we can pass few parameters 
or variables , angualr_target:- checking condition for deployment env

-> String parameter for diff branches like geo, servcie,resource

-> source code managemnt -> we need to clone the repo in jenkins machine, here we have mentioned cloning url using ssh authentication
credentilas:- build.opeartor@csgsol.com (add user based creds).

-> Here we will invoke Ant for build with properties Ant version(Ant) and targets(build number & service name), build file:- D:proform-operations\deployment\
build\jenkins-build.xml, properties:- MavenProjectOAuth=ProformOAuth  (first target will be build & second target will be OAuth)

-> build_number:- this parameter will be replaced by build number which we mention while building & targets is nothing which tells what should be executed. 

-> OAuth -> thsi will be executed because we have mentioned OAuth in tragets in jenkins with ANt build

-> MavenProjectOAuth=ProformOAuth -> this ia property where we will mention folder name in jenkins where cloning of repo will happen in path below:-
 D:\Jenkins\workspace\Proform-OAuth, wt ever actions we mentioned will happen within this mentioned folder with respect to targets.
 
-> delete workspace before build, which cleans all old code and clones the repo with code/content. proform-operations(ops branch)

-> Initial task:- deplyment.proerties -> path:- D:\Proform-operations\deployment\config\common\deployment.properties from here it will copy deployment 
properties to jenkins workspace(path:- D:\jenkins\workspace) (build & resource build) where it will match for build number(which will give in paarmetrs).

-> First Proform-OAuth build should be completed so that we target copy in Simuation job so that it wont copy old build number

-> OAuth target:- it will copy deployment.properties file from Jenkins-workspace to Jenkins/workspace/Proform-OAuth/src/main/resources folder.
(will replace the old build no with new build number)

-> Instance config folder:- this will be defined as property and value:- D:\Proform/operations/deployment/config/($instance) -> instance is uat/test/dev/prod and also
it will copy other files like env.properties, log4j2 and so on. Ant build for replacing/defining properties)

-> Build:- pom.xml , goals(clean & install) in path:- D:/Jenkins/workspace/Proform-OAuth , In backend it will run in cmd prompt clean installl by using pom.xml  
   pom.xml will be done by development team, O/P of Maven will come into folder D:/Proform-on-docker/services.
   
-> Services build:- It will take parameetrs as instance, buildnumber,deployment-environment,angularprod,codebranch  and then souce code mgmt where we
will clone the git repo with user creds and then we will mention branch to be builded (*/${codebranch}.

-> Build triggers:- if any dependency is missing the build will be failed.(build whenever dependency snapshot is built) like changes in code branch or 
dependencies required for this if missing then the build will fail and then build-environemnt where it will delete old workspace built.

-> Pre-steps :- where we will initiate some executions in advanced (Ant version, tagets:- Services, Build file(the pathe wehere build file will be present) and
code cloning will happen in path D:/Jenkins/workspace/Services) -> where it will fetch file from D:/Jenkins/worksoace/deployment.properties) and copy
log4j2, assessment to D:/Jenkins/workspace/uat/proform , so all process remains same but config folder and folder-structure will be changing for 
remaining services and default file web.xml will be present for all servcies due to dependency.

-> 
 

