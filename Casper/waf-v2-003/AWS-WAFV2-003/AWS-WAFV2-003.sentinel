# This policy ensures WAF Web ACL is configured to log requests into approved log destination (AWS Kinesis Firehose)

# Import tfplan/v2 as tfplan to gain access to the raw collection
import "tfplan/v2" as tfplan

violatingResources = 0

evaluate = func(resource) {
    violations = 0
    if resource.address matches "^aws_wafv2_web_acl_logging_configuration\\.*" {
        firehoseConfig = resource.expressions.log_destination_configs.references else false # check if log destination is a reference

        if firehoseConfig is not false {
            for firehoseConfig as wafRef {
                if wafRef not matches "^aws_kinesis_firehose_delivery_stream\\.*" and wafRef not matches "^data\\.aws_kinesis_firehose_delivery_stream\\.*" {
                    violations += 1
                }
            }
        }
        
    } else { # check if log destination is set to a constant value
        configConst = resource.expressions.log_destination_configs.constant_value else false
        if configConst is not false {
            for configConst as resourceArn {
                if resourceArn not matches "^arn:aws:firehose:*" {
                    violations += 1
                }
            }
        }
    }

    if violations > 0 {
        print("WAFV2 Web ACL is not configured to log requestes into AWS Kinesis Firehose")
    }

    return violations
}

# Get all resource from the raw data
getAllResources = tfplan.raw["configuration"].root_module.resources else false

if getAllResources is not false {
    for getAllResources as address, resource { # Loop through each resource
        evaluationResult = evaluate(resource) # Evaluate resource
        violatingResources += evaluationResult
    }
}

# Get all modules from the raw data
getAllModules = tfplan.raw["configuration"].root_module.module_calls else false

if getAllModules is not false {
    for keys(getAllModules) as module { # Loop through each module
        resources = getAllModules[module].module.resources else false
        if resources is not false {
            for resources as resource { # Loop through each resource
                evaluationResult = evaluate(resource) # Evaluate resource
                violatingResources += evaluationResult
            }
        }
    }
}
# Main rule
main = rule {
    violatingResources == 0
}