// Description: Ensure IAM User policies don't grant access to wildcard Resource

import "tfplan-functions" as tfplan
import "tfplan/v2" as plan
import "types"
import "strings"
import "json"

# all the resources of aws_iam_user_policy
allIamPolicies = filter plan.resource_changes as _, rc {
    rc.type is "aws_iam_user_policy" 
}

usingdatasource = filter plan.resource_changes as _, rc {
    rc.type is "aws_iam_policy_document" and rc.address contains "aws_iam_policy_document"
}


# Set variable to keep track of violating policies
violatingPolicyCount = 0


# Function for the checking json encoded IAM UserPolicy
jsonEncodedPolicyCheck = func(resources) {

    for resources as address, policy {

        violatingPolicy = false

        getPolicy = policy.change.after["policy"] else false

        if getPolicy is not false {

            if length(getPolicy) > 0 {

                policyObject = json.unmarshal(getPolicy)

                for policyObject.Statement as statement {

                    currentEffect = statement.Effect else false
                    currentResource = statement.Resource else false

                    if currentEffect is not false and currentResource is not false {

                        if currentEffect == "Allow" {

                            if types.type_of(currentResource) is "string" {

                                if currentResource == "*" {
                                    violatingPolicy = true
                                }
                            } else if types.type_of(currentResource) is "list" {

                                for resource as currentResource {
                                    if resource == "*" {
                                        violatingPolicy = true
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if violatingPolicy == true {
                violatingPolicyCount += 1
                print("IAM User policy", address, "has Effect = Allow and Resource = *")
            }
        }
    }

    return violatingPolicyCount
}

#Function for chceking data source programmed IAM user Policy
dataSourceCheck = func(resources) {

    for resources as address, policy {

        violatingPolicy = false 

        getPolicyStatement = policy.change.after.statement

        for getPolicyStatement as statement {

            if statement.effect == "Allow" else false {
                violatingPolicy = true
            }

            for statement.resources as res {
                if res == "*" {
                    violatingPolicy = true
                }
            }
        }

        if violatingPolicy == true {
            violatingPolicyCount += 1
            print("IAM User Policy implemented using data source ", address, "has Effect = Allow and Resource = *")
        }
    }
    return violatingPolicyCount
}

jsonEncodedPolicyRule = rule {
    jsonEncodedPolicyCheck(allIamPolicies) == 0
}

dataSourcePolicyCheck = rule {
    dataSourceCheck(usingdatasource) == 0
}


main = rule {
   jsonEncodedPolicyRule and dataSourcePolicyCheck
}