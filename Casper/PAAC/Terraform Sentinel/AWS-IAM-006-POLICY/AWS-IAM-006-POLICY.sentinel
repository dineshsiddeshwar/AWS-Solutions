# Ensure IAM User policies don't grant access to wildcard Resource

# This policy works for User policies defined via the jsonencode function

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "types" # Import the types library
import "json" # Import the json library

# Get all IAM policy resources
allIamPolicies = plan.find_resources("aws_iam_policy")

# Set variable to keep track of violating policies
violatingPolicyCount = 0

# Loop through each policy
for allIamPolicies as address, policy {

    violatingPolicy = false # Reset to false for each policy resource 
    
    getPolicy = policy.change.after["policy"] else false
    
    if getPolicy is not false {
        
        if length(getPolicy) > 0 {
            
            policyObject = json.unmarshal(getPolicy) # Convert the policy to a JSON object
    

            for policyObject.Statement as statement { # Loop through each statement in the policy
                currentEffect = statement.Effect else false
                currentResource = statement.Resource else false
                
                if currentEffect is not false and currentResource is not false {
                    
                    if currentEffect == "Allow" {

                        if types.type_of(currentResource) is "string" {
                        
                            if currentResource == "*" {
                                violatingPolicy = true
                            }

                        } else if types.type_of(currentResource) is "list" {

                            for currentResource as resource{
                                if resource == "*" {
                                    violatingPolicy = true
                                }
                            }
                        }
                    }
                }
            }

            if violatingPolicy == true {
                violatingPolicyCount += 1
                print ("IAM User policy", address, "has Effect = Allow and Resource = *")
            }
        }
    }
}

# Main rule
main = rule {
    violatingPolicyCount == 0
}