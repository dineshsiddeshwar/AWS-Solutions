Description: The CloudFormation template for Resource Scheduler Quick Setup
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  PANDASLibraryName:
    Type: String
    Default: AWSSDKPandas-Python312
    Description: "Enter the name of AWS Provided Pandas Library"
  PANDASLibraryVersion:
    Type: String
    Default: '8'
    Description: "Enter the version of AWS Provided Pandas Library"
  UID:
    Type: String
    Description: "Enter Unique String to Identiy Event Rule for this Schedule. But Make sure not to change this UID if in case of any type of Update in the schedule or the tags"
  StartWeekDay:
    Type: String
    Description: Enter the weekday from when the schedule needs to start resources
    Default: Monday
    AllowedValues:
      - "Monday"
      - "Tuesday"
      - "Wednesday"
      - "Thursday"
      - "Friday"
      - "Saturday"
      - "Sunday"
  StopWeekDay:
    Type: String
    Description: Enter the weekday  when the schedule needs to stop resources
    Default: Monday
    AllowedValues:
      - "Monday"
      - "Tuesday"
      - "Wednesday"
      - "Thursday"
      - "Friday"
      - "Saturday"
      - "Sunday"
  ScheduleTimeZone:
    Type: String
    Description: Choose Time zone
    Default: "America/Chicago"
    AllowedValues:
      - "Africa/Abidjan"
      - "Africa/Accra"
      - "Africa/Addis_Ababa"
      - "Africa/Algiers"
      - "America/Adak"
      - "America/Anchorage"
      - "America/Anguilla"
      - "America/Antigua"
      - "America/Araguaina"
      - "America/Argentina/Buenos_Aires"
      - "America/Argentina/Catamarca"
      - "America/Argentina/Cordoba"
      - "America/Argentina/Jujuy"
      - "America/Argentina/La_Rioja"
      - "America/Argentina/Mendoza"
      - "America/Argentina/Rio_Gallegos"
      - "America/Argentina/Salta"
      - "America/Argentina/San_Juan"
      - "America/Argentina/San_Luis"
      - "America/Argentina/Tucuman"
      - "America/Argentina/Ushuaia"
      - "America/Aruba"
      - "America/Asuncion"
      - "America/Atikokan"
      - "America/Bahia"
      - "America/Bahia_Banderas"
      - "America/Barbados"
      - "America/Belem"
      - "America/Belize"
      - "America/Blanc-Sablon"
      - "America/Boa_Vista"
      - "America/Bogota"
      - "America/Boise"
      - "America/Cambridge_Bay"
      - "America/Campo_Grande"
      - "America/Cancun"
      - "America/Caracas"
      - "America/Cayenne"
      - "America/Cayman"
      - "America/Chicago"
      - "America/Chihuahua"
      - "America/Costa_Rica"
      - "America/Creston"
      - "America/Cuiaba"
      - "America/Curacao"
      - "America/Danmarkshavn"
      - "America/Dawson"
      - "America/Dawson_Creek"
      - "America/Denver"
      - "America/Detroit"
      - "America/Dominica"
      - "America/Edmonton"
      - "America/Eirunepe"
      - "America/El_Salvador"
      - "America/Fortaleza"
      - "America/Glace_Bay"
      - "America/Godthab"
      - "America/Goose_Bay"
      - "America/Grand_Turk"
      - "America/Grenada"
      - "America/Guadeloupe"
      - "America/Guatemala"
      - "America/Guayaquil"
      - "America/Guyana"
      - "America/Halifax"
      - "America/Havana"
      - "America/Hermosillo"
      - "America/Indiana/Indianapolis"
      - "America/Indiana/Knox"
      - "America/Indiana/Marengo"
      - "America/Indiana/Petersburg"
      - "America/Indiana/Tell_City"
      - "America/Indiana/Vevay"
      - "America/Indiana/Vincennes"
      - "America/Indiana/Winamac"
      - "America/Inuvik"
      - "America/Iqaluit"
      - "America/Jamaica"
      - "Asia/Aden"
      - "Asia/Almaty"
      - "Asia/Amman"
      - "Asia/Anadyr"
      - "Asia/Aqtau"
      - "Asia/Aqtobe"
      - "Asia/Ashgabat"
      - "Asia/Baghdad"
      - "Asia/Bahrain"
      - "Asia/Baku"
      - "Asia/Bangkok"
      - "Asia/Beirut"
      - "Asia/Bishkek"
      - "Asia/Brunei"
      - "Asia/Choibalsan"
      - "Asia/Chongqing"
      - "Asia/Colombo"
      - "Asia/Damascus"
      - "Asia/Dhaka"
      - "Asia/Dili"
      - "Asia/Dubai"
      - "Asia/Dushanbe"
      - "Asia/Gaza"
      - "Asia/Harbin"
      - "Asia/Hebron"
      - "Asia/Ho_Chi_Minh"
      - "Asia/Hong_Kong"
      - "Asia/Hovd"
      - "Asia/Irkutsk"
      - "Asia/Jakarta"
      - "Asia/Jayapura"
      - "Asia/Jerusalem"
      - "Asia/Kabul"
      - "Asia/Kamchatka"
      - "Asia/Karachi"
      - "Asia/Kashgar"
      - "Asia/Kathmandu"
      - "Asia/Khandyga"
      - "Asia/Kolkata"
      - "Asia/Krasnoyarsk"
      - "Asia/Kuala_Lumpur"
      - "Asia/Kuching"
      - "Asia/Kuwait"
      - "Asia/Macau"
      - "Asia/Magadan"
      - "Asia/Makassar"
      - "Asia/Manila"
      - "Asia/Muscat"
      - "Asia/Nicosia"
      - "Asia/Novokuznetsk"
      - "Asia/Novosibirsk"
      - "Asia/Omsk"
      - "Asia/Oral"
      - "Asia/Phnom_Penh"
      - "Asia/Pontianak"
      - "Asia/Pyongyang"
      - "Asia/Qatar"
      - "Asia/Qyzylorda"
      - "Asia/Rangoon"
      - "Asia/Riyadh"
      - "Asia/Sakhalin"
      - "Asia/Samarkand"
      - "Asia/Seoul"
      - "Asia/Shanghai"
      - "Asia/Singapore"
      - "Asia/Taipei"
      - "Asia/Tashkent"
      - "Asia/Tbilisi"
      - "Asia/Tehran"
      - "Asia/Thimphu"
      - "Asia/Tokyo"
      - "Asia/Ulaanbaatar"
      - "Asia/Urumqi"
      - "Asia/Ust-Nera"
      - "Asia/Vientiane"
      - "Asia/Vladivostok"
      - "Asia/Yakutsk"
      - "Asia/Yekaterinburg"
      - "Asia/Yerevan"
      - "Atlantic/Azores"
      - "Atlantic/Bermuda"
      - "Atlantic/Canary"
      - "Atlantic/Cape_Verde"
      - "Atlantic/Faroe"
      - "Atlantic/Madeira"
      - "Atlantic/Reykjavik"
      - "Atlantic/South_Georgia"
      - "Atlantic/St_Helena"
      - "Atlantic/Stanley"
      - "Australia/Adelaide"
      - "Australia/Brisbane"
      - "Australia/Broken_Hill"
      - "Australia/Currie"
      - "Australia/Darwin"
      - "Australia/Eucla"
      - "Australia/Hobart"
      - "Australia/Lindeman"
      - "Australia/Lord_Howe"
      - "Australia/Melbourne"
      - "Australia/Perth"
      - "Australia/Sydney"
      - "Canada/Atlantic"
      - "Canada/Central"
      - "Canada/Eastern"
      - "Canada/Mountain"
      - "Canada/Newfoundland"
      - "Canada/Pacific"
      - "Europe/Amsterdam"
      - "Europe/Andorra"
      - "Europe/Athens"
      - "Europe/Belgrade"
      - "Europe/Berlin"
      - "Europe/Bratislava"
      - "Europe/Brussels"
      - "Europe/Bucharest"
      - "Europe/Budapest"
      - "Europe/Busingen"
      - "Europe/Chisinau"
      - "Europe/Copenhagen"
      - "Europe/Dublin"
      - "Europe/Gibraltar"
      - "Europe/Guernsey"
      - "Europe/Helsinki"
      - "Europe/Isle_of_Man"
      - "Europe/Istanbul"
      - "Europe/Jersey"
      - "Europe/Kaliningrad"
      - "Europe/Kiev"
      - "Europe/Lisbon"
      - "Europe/Ljubljana"
      - "Europe/London"
      - "Europe/Luxembourg"
      - "Europe/Madrid"
      - "Europe/Malta"
      - "Europe/Mariehamn"
      - "Europe/Minsk"
      - "Europe/Monaco"
      - "Europe/Moscow"
      - "Europe/Oslo"
      - "Europe/Paris"
      - "Europe/Podgorica"
      - "Europe/Prague"
      - "Europe/Riga"
      - "Europe/Rome"
      - "Europe/Samara"
      - "Europe/San_Marino"
      - "Europe/Sarajevo"
      - "Europe/Simferopol"
      - "Europe/Skopje"
      - "Europe/Sofia"
      - "Europe/Stockholm"
      - "Europe/Tallinn"
      - "Europe/Tirane"
      - "Europe/Uzhgorod"
      - "Europe/Vaduz"
      - "Europe/Vatican"
      - "Europe/Vienna"
      - "Europe/Vilnius"
      - "Europe/Volgograd"
      - "Europe/Warsaw"
      - "Europe/Zagreb"
      - "Europe/Zaporozhye"
      - "Europe/Zurich"
      - "GMT"
      - "Indian/Antananarivo"
      - "Indian/Chagos"
      - "Indian/Christmas"
      - "Indian/Cocos"
      - "Indian/Comoro"
      - "Indian/Kerguelen"
      - "Indian/Mahe"
      - "Indian/Maldives"
      - "Indian/Mauritius"
      - "Indian/Mayotte"
      - "Indian/Reunion"
      - "Pacific/Apia"
      - "Pacific/Auckland"
      - "Pacific/Chatham"
      - "Pacific/Chuuk"
      - "Pacific/Easter"
      - "Pacific/Efate"
      - "Pacific/Enderbury"
      - "Pacific/Fakaofo"
      - "Pacific/Fiji"
      - "Pacific/Funafuti"
      - "Pacific/Galapagos"
      - "Pacific/Gambier"
      - "Pacific/Guadalcanal"
      - "Pacific/Guam"
      - "Pacific/Honolulu"
      - "Pacific/Johnston"
      - "Pacific/Kiritimati"
      - "Pacific/Kosrae"
      - "Pacific/Kwajalein"
      - "Pacific/Majuro"
      - "Pacific/Marquesas"
      - "Pacific/Midway"
      - "Pacific/Nauru"
      - "Pacific/Niue"
      - "Pacific/Norfolk"
      - "Pacific/Noumea"
      - "Pacific/Pago_Pago"
      - "Pacific/Palau"
      - "Pacific/Pitcairn"
      - "Pacific/Pohnpei"
      - "Pacific/Port_Moresby"
      - "Pacific/Rarotonga"
      - "Pacific/Saipan"
      - "Pacific/Tahiti"
      - "Pacific/Tarawa"
      - "Pacific/Tongatapu"
      - "Pacific/Wake"
      - "Pacific/Wallis"
      - "US/Alaska"
      - "US/Arizona"
      - "US/Central"
      - "US/Eastern"
      - "US/Hawaii"
      - "US/Mountain"
      - "US/Pacific"
      - "UTC"
  StartTime:
    Type: String
    MinLength: 8
    MaxLength: 8
    AllowedPattern: '^(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])$'
    Description: Enter Start time in HH:MM:SS format ( Ex 09:00:00 which is 09 hr 00 m 00 s). Start time is when Specified resources will started.  Use the 24-hours format to differentiate between AM and PM.
  StopTime:
    Type: String
    MinLength: 8
    MaxLength: 8
    AllowedPattern: '^(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])$'
    Description: Enter Start time in HHMMSS format ( Ex 09:00:00 which is 09 hr 00 m 00 s). Stop time is when Specified resources will Stop.  Use the 24-hours format to differentiate between AM and PM.
  ResourceType:
    Type: String
    Description: Choose the resource type
    Default: "EC2"
    AllowedValues:
      - "EC2"
      - "RDS"
      - "ASG"
      - "RDS-Cluster"
  TagKey:
    Type: String
    Description: Enter the Tag Key name  of the resources that you want to target
  TagValue:
    Type: String
    Description: Enter the Tag Value name  of the resources that you want to target

Conditions:
  EC2: !Equals
    - !Ref ResourceType
    - 'EC2'
  RDS: !Equals
    - !Ref ResourceType
    - 'RDS'
  ASG: !Equals
    - !Ref ResourceType
    - 'ASG'
  Cluster: !Equals
    - !Ref ResourceType
    - 'RDS-Cluster'
  

Resources:
  ####################################### EC2 ###############################################################
  customlambda:
    Type: AWS::Lambda::Function
    Condition: EC2
    Properties:
      FunctionName: !Sub Cloud-Engineering-custom-resource-creation-${ResourceType}-${UID}
      Code:
        ZipFile: |
          import requests
          import boto3
          import json
          from datetime import datetime, timedelta
          import random

          SUCCESS = 'SUCCESS'
          FAILED = 'FAILED'


          def send(event, context, response_status, response_data, reason_data):
                  '''
                  Send status to the cloudFormation
                  Template.
                  '''
                  print("Inside send method")
                  response_url = event['ResponseURL']

                  response_body = {}
                  response_body['Status'] = response_status
                  response_body['Reason'] = reason_data + ' See the details in CloudWatch Log Stream: ' + \
                                            context.log_stream_name
                  if 'PhysicalResourceId' in event:
                      response_body['PhysicalResourceId'] = event['PhysicalResourceId']
                  else:
                      response_body['PhysicalResourceId'] = context.log_stream_name
                  response_body['StackId'] = event['StackId']
                  response_body['RequestId'] = event['RequestId']
                  response_body['LogicalResourceId'] = event['LogicalResourceId']
                  response_body['Data'] = response_data

                  json_responsebody = json.dumps(response_body)

                  print("Response body:{}".format(json_responsebody))

                  headers = {
                      'content-type': '',
                      'content-length': str(len(json_responsebody))
                  }

                  try:
                      response = requests.put(response_url,
                                              data=json_responsebody,
                                              headers=headers)
                      print("Status code:{} ".format(response.reason))
                  except Exception as exception:
                      print("send(..) failed executing requests.put(..):{} ".format(str(exception)))

          def delete_document(ssm_client,name):
              try:
                  response = ssm_client.delete_document(Name=name)
                  if response:
                      return True
                  else:
                      raise f"SOmething went wrong in deleting document {name}"
              except Exception as ex:
                  raise ex

          def create_document(ssm_client,name,content):
              try:
                  print(f"Inside create document {name}")
                  ssm_response = ssm_client.create_document(
                              Content=content,
                              Name=name,
                              DocumentType='Automation',
                              DocumentFormat='YAML'
                          )
                  if ssm_response:
                      return True
                  else:
                      raise f"Something went wrong in create document {name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                    try:
                      ssm_response = ssm_client.update_document(
                              Content=content,
                              Name=name,
                              DocumentVersion="$LATEST",
                              DocumentFormat='YAML'
                          )
                      if ssm_response:
                          return True
                    except Exception as lastex:
                      if 'DuplicateDocumentContent' in str(lastex):
                          return True
                  elif 'DocumentLimitExceeded' in str(ex):
                      raise "Document limit exceeded. Please delete few documents"
                  raise ex

          def next_weekday(weekday_name,next_day):
              # Days of the week mapping (Monday is 0, Sunday is 6)
              weekdays = {"Monday": 0, "Tuesday": 1, "Wednesday": 2, "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6}
              today = datetime.today()
              today_weekday = today.weekday()
              target_weekday = weekdays[weekday_name]
              if not next_day:
                  if today_weekday < target_weekday:
                      days_to_next = target_weekday - today_weekday
                  else:
                      days_to_next = 7 - today_weekday + target_weekday
                  next_occurrence = today + timedelta(days=days_to_next)
              else:
                  days_until_saturday = (target_weekday - today_weekday + 7) % 7 + 7
                  next_occurrence = today + timedelta(days=days_until_saturday)
              return next_occurrence.strftime("%Y-%m-%d")

          def get_start_end_date(StartWeekDay,StopWeekDay,next_day):
              try:
                  return next_weekday(StartWeekDay,next_day),next_weekday(StopWeekDay,next_day)
              except Exception as ex:
                  print(ex)
                  raise ex
              
          def delete_caledar(ResourceProperties):
              try:
                  print("Inside delete calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  calendar_name =f"Cloud-Engineering-{ResourceProperties['ResourceType']}-scheduler-{ResourceProperties['TagKey']}-{ResourceProperties['TagValue']}-{ResourceProperties['UID']}"
                  response = ssm_client.delete_document(Name=calendar_name)
                  if response:
                      return SUCCESS
                  else:
                      raise f"SOmething went wrong in deleting document Solvnetum calendar document"
              except Exception as ex:
                  raise ex
              
          def update_caledar(ResourceProperties,calendar_name):
              
              try:
                  print("Inside update calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  try:
                    ssm_response = ssm_client.update_document(
                                Content=icalendar,
                                Name=calendar_name,
                                DocumentVersion="$LATEST",
                                DocumentFormat='TEXT'
                            )
                    if ssm_response:
                        return SUCCESS
                  except Exception as lastex:
                    if 'DuplicateDocumentContent' in str(lastex):
                        return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
                  
              except Exception as ex:
                  raise ex


              
          def create_caledar(ResourceProperties,calendar_name):
              try:
                  print("Inside Create calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  ssm_response = ssm_client.create_document(
                              Content=icalendar,
                              Name=calendar_name,
                              DocumentType='ChangeCalendar',
                              DocumentFormat='TEXT'
                          )
                  if ssm_response:
                      return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                      try:
                        ssm_response = ssm_client.update_document(
                                Content=icalendar,
                                Name=calendar_name,
                                DocumentVersion="$LATEST",
                                DocumentFormat='TEXT'
                            )
                        if ssm_response:
                            return SUCCESS
                      except Exception as lastex:
                        if 'DuplicateDocumentContent' in str(lastex):
                            return SUCCESS
                  raise ex

          def create_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  startassocdocument = """
                  description: |
                    ### Document Name - StartStateManagerAssociations
                    ## What does this document do?
                    This document starts the State Manager Association

                    ## Input Parameters
                    * AutomationAssumeRole: (Required) The ARN of the IAM role that this runboon will use to execution automation.
                    * Association IDs: (Required) The association IDs that you want to run immediately and only one time.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    AssociationIDs:
                      type: StringList
                      description: List of the State Manager Association IDs to start
                    AutomationAssumeRole:
                      type: String
                      description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
                  mainSteps:
                    - name: StartAssociation
                      action: aws:executeAwsApi
                      inputs:
                        Service: ssm
                        Api: StartAssociationsOnce
                        AssociationIds: '{{ AssociationIDs }}'
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-association-Document-EC2",startassocdocument)
                  start = """
                  description: |
                    ### Document Name - EC2StartSSMDocument
                    ## What does this document do?
                    This document finds the tagged EC2 instances and start them.

                    ## Input Parameters
                    * TagKey: (Required) Tag Key to filter list of EC2 Instances
                    * TagValue: (Required) Tag Value to filter list of EC2 Instances
                    * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    TargetTagKey:
                      type: String
                      description: (Required) The tag name (key) to filter list of EC2 Instances
                    TargetTagValue:
                      type: String
                      description: (Required) The change calendar name to filter list of EC2 Instances
                    AutomationAssumeRole:
                      type: String
                      description: Automation role to be used by the runbook
                      default: ''
                    ChangeCalendarName:
                      type: String
                      description: Name of change calendar to use
                      default: ''
                  outputs:
                    - startInstances.OutputPayload
                  mainSteps:
                    - name: startInstances
                      description: Start the selected instances
                      maxAttempts: 3
                      action: aws:executeScript
                      timeoutSeconds: 600
                      onFailure: Abort
                      inputs:
                        Runtime: python3.8
                        Handler: start_instances
                        InputPayload:
                          tagKey: '{{TargetTagKey}}'
                          tagValue: '{{TargetTagValue}}'
                          changeCalendarName: '{{ChangeCalendarName}}'
                        Script: |
                          def start_instances(events, context):
                              import boto3
                              import time

                              # Initialize boto clients
                              ec2_resource = boto3.resource('ec2')
                              ec2_client = boto3.client('ec2')
                              ssm_client = boto3.client('ssm')

                              # Get input values to the script
                              tag_key = events['tagKey']
                              tag_value = events['tagValue']
                              change_calendar_name = events['changeCalendarName']

                              # Define the constant batch size for number of instances started/stopped in one boto call
                              batch_size = 1000

                              def get_calendar_state(calendar_name):
                                  return ssm_client.get_calendar_state(
                                      CalendarNames=[calendar_name]
                                  )

                              def get_tagged_instance_ids():
                                  instances = ec2_resource.instances.filter(
                                      Filters=[
                                          {
                                              'Name': tag_key,
                                              'Values': [tag_value]
                                          },
                                          {
                                              'Name': 'instance-state-name',
                                              'Values': ['stopped']
                                          }
                                      ]
                                  )

                                  return [instance.id for instance in instances]

                              def create_batches(list_instance_ids):
                                  for i in range(0, len(list_instance_ids), batch_size):
                                      yield list_instance_ids[i:i + batch_size]

                              def start_tagged_instances(list_batches):
                                  for batch in list_batches:
                                      try:
                                          ec2_client.start_instances(
                                              InstanceIds=batch
                                          )
                                      except Exception:
                                          pass
                                      time.sleep(0.5)

                              calendar_state = get_calendar_state(change_calendar_name)
                              if calendar_state.get('State') == 'OPEN':
                                  list_tagged_instance_ids = get_tagged_instance_ids()
                                  batches = create_batches(list_tagged_instance_ids)
                                  start_tagged_instances(list(batches))
                                  return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-SSM-Document-EC2",start)
                  stop = """
                  description: |
                    ### Document Name - EC2StopSSMDocument
                    ## What does this document do?
                    This document finds the tagged EC2 instances and stops them.

                    ## Input Parameters
                    * TargetTagKey: (Required) Tag Key to filter list of EC2 Instances
                    * TagValue: (Required) Tag Value to filter list of EC2 Instances
                    * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    TargetTagKey:
                      type: String
                      description: (Required) The tag name (key) to filter list of EC2 Instances
                    TargetTagValue:
                      type: String
                      description: (Required) The change calendar name (tag value) to filter list of EC2 Instances
                    AutomationAssumeRole:
                      type: String
                      description: Automation role to be used by the runbook
                      default: ''
                    ChangeCalendarName:
                      type: String
                      description: Name of change calendar to use
                      default: ''
                  outputs:
                    - stopInstances.OutputPayload
                  mainSteps:
                    - name: stopInstances
                      description: Start the selected instances
                      maxAttempts: 3
                      action: aws:executeScript
                      timeoutSeconds: 600
                      onFailure: Abort
                      inputs:
                        Runtime: python3.8
                        Handler: stop_instances
                        InputPayload:
                          tagKey: '{{TargetTagKey}}'
                          tagValue: '{{TargetTagValue}}'
                          changeCalendarName: '{{ChangeCalendarName}}'
                        Script: |
                          def stop_instances(events, context):
                              import boto3
                              import time

                              # Initialize boto clients
                              ec2_resource = boto3.resource('ec2')
                              ec2_client = boto3.client('ec2')
                              ssm_client = boto3.client('ssm')

                              # Get input values to the script
                              tag_key = events['tagKey']
                              tag_value = events['tagValue']
                              change_calendar_name = events['changeCalendarName']

                              # Define the constant batch size for number of instances started/stopped in one boto call
                              batch_size = 1000

                              def get_calendar_state(calendar_name):
                                  return ssm_client.get_calendar_state(
                                      CalendarNames=[calendar_name]
                                  )

                              def get_tagged_instance_ids():
                                  instances = ec2_resource.instances.filter(
                                      Filters=[
                                          {
                                              'Name': tag_key,
                                              'Values': [tag_value]
                                          },
                                          {
                                              'Name': 'instance-state-name',
                                              'Values': ['running']
                                          }
                                      ]
                                  )

                                  return [instance.id for instance in instances]

                              def create_batches(list_instance_ids):
                                  for i in range(0, len(list_instance_ids), batch_size):
                                      yield list_instance_ids[i:i + batch_size]

                              def stop_tagged_instances(list_batches):
                                  for batch in list_batches:
                                      try:
                                          ec2_client.stop_instances(
                                              InstanceIds=batch
                                          )
                                      except Exception:
                                          pass
                                      time.sleep(0.5)

                              calendar_state = get_calendar_state(change_calendar_name)
                              if calendar_state.get('State') == 'CLOSED':
                                  list_tagged_instance_ids = get_tagged_instance_ids()
                                  batches = create_batches(list_tagged_instance_ids)
                                  stop_tagged_instances(list(batches))
                                  return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document-EC2",stop)
                  return SUCCESS
                  #create_document(name,content)
              except Exception as ex:
                  raise ex

          def create_ssm_explorer(ResourceProperties):
            try:
                ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                accountid = boto3.client('sts').get_caller_identity()["Account"]
                describe_respons = ssm_client.list_associations(
                            AssociationFilterList=[
                                {
                                    'key': 'AssociationName',
                                    'value': 'Cloud-Engineering-Scheduler-SSM-EnableExplore'
                                }
                            ])
                if len(describe_respons['Associations']) > 0:
                    return True
                ssm_response = ssm_client.create_association(
                        Name="AWS-EnableExplorer",AssociationName="Cloud-Engineering-Scheduler-SSM-EnableExplorer",Parameters={"AutomationAssumeRole": [f"arn:aws:iam::{accountid}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-{ResourceProperties['ResourceType']}"]})
                if ssm_response:
                    return True
                else:
                    raise "SOmething went wrong in creating ssm explorer"
            except Exception as ex:
                if 'AssociationAlreadyExists' in str(ex):
                    return True
                raise ex
          def delete_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  delete_document(ssm_client,"Cloud-Engineering-start-SSM-Document")
                  delete_document(ssm_client,"Cloud-Engineering-start-association-Document")
                  delete_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document")
                  return SUCCESS
              except Exception as ex:
                  raise ex

          def lambda_handler(event,context):
              try:
                  print(event)
                  response_data = {}
                  print("Received a {} Request".format(event['RequestType']))
                  calendar_name =f"Cloud-Engineering-{event['ResourceProperties']['ResourceType']}-scheduler-{event['ResourceProperties']['TagKey']}-{event['ResourceProperties']['TagValue']}-{event['ResourceProperties']['UID']}"
                  if event['RequestType'] == 'Create':
                      response_data["EnablerAssociation"] =  create_ssm_explorer(event['ResourceProperties'])
                      response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                      response_data["DocumentCreated"] =  create_all_document(event["ResourceProperties"])

                  elif event['RequestType'] == 'Update':
                      if event['ResourceProperties'] != event['OldResourceProperties']:
                          if event['ResourceProperties']['TagValue'] != event['OldResourceProperties']['TagValue'] or event['ResourceProperties']['TagKey'] != event['OldResourceProperties']['TagKey']:
                              print("There is a difference in tags")
                              response_data["CalendarUpdated"] = delete_caledar(event["OldResourceProperties"])
                              response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                          else:
                              response_data["CalendarUpdated"] =  update_caledar(event['ResourceProperties'],calendar_name)
                              #response_data["DocumentUpdated"] =  SUCCESS
                      else:
                          response_data["CalendarUpdated"] = SUCCESS
                      response_data["DocumentUpdated"] = create_all_document(event["ResourceProperties"])
                  elif event['RequestType'] == 'Delete':
                      response_data["CalendarDeleted"] =  delete_caledar(event["ResourceProperties"])
                      #response_data["DocumentDeleted"] =  delete_all_document(event["ResourceProperties"])

                  send(event, context, SUCCESS, response_data, "All good \n ")
              except Exception as ex:
                  print(ex)
                  response_data = {
                      "CalendarCreated": "FAILED",
                      "AssociationCreated": "FAILED",
                      "DocumentCreated": "FAILED"
                  }
                  reason_data = "Something went wrong in the beginning of the lambda"
                  send(event, context, FAILED, response_data, reason_data)
                  return True
     
                    
      Description: Lambda Function to create a tag for the account
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-custom-resource-creation-role-${ResourceType}'
      Runtime: python3.12
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:${PANDASLibraryName}:${PANDASLibraryVersion}'
      Timeout: 900
      MemorySize: 10240

  CFNWaiterCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Condition: EC2
    DependsOn: customlambda
    Properties:
      ServiceToken: !GetAtt customlambda.Arn
      StopTime: !Ref StopTime
      StartTime: !Ref StartTime
      ScheduleTimeZone: !Ref ScheduleTimeZone
      StopWeekDay: !Ref StopWeekDay
      StartWeekDay: !Ref StartWeekDay
      Region: !Ref AWS::Region
      ResourceType: !Ref ResourceType
      TagValue: !Ref TagValue
      TagKey: !Ref TagKey
      UID: !Ref UID

  StartAssociation:
    Type: AWS::SSM::Association
    Condition: EC2
    DependsOn: CFNWaiterCustomResource
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StartEC2Instances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-start-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub tag:${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
    

  StopAssociation:
    Type: AWS::SSM::Association
    Condition: EC2
    DependsOn: CFNWaiterCustomResource
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StopEC2Instances-${UID}
      Name: !Sub Cloud-Engineering-Stop-SSM-Document-${ResourceType}
      DocumentVersion: $LATEST
      Parameters:
        TargetTagKey:
          - !Sub tag:${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
  
  StartEC2InstancesEventRule:
    Type: AWS::Events::Rule
    Condition: EC2
    DependsOn: CFNWaiterCustomResource
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-start-rule
      Description: This rule will start the custom ssm document to start  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - OPEN
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StartAssociation.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}

  StopEC2InstancesEventRule:
    Type: AWS::Events::Rule
    Condition: EC2
    DependsOn: CFNWaiterCustomResource
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-stop-rule
      Description: This rule will start the custom ssm document to stop ec2 instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - CLOSED
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StopAssociation.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}

  ############################### RDS ################################################################
  customlambdards:
    Type: AWS::Lambda::Function
    Condition: RDS
    Properties:
      FunctionName: !Sub Cloud-Engineering-custom-resource-creation-${ResourceType}-${UID}
      Code:
        ZipFile: |
          import requests
          import boto3
          import json
          from datetime import datetime, timedelta
          import random

          SUCCESS = 'SUCCESS'
          FAILED = 'FAILED'


          def send(event, context, response_status, response_data, reason_data):
                  '''
                  Send status to the cloudFormation
                  Template.
                  '''
                  print("Inside send method")
                  response_url = event['ResponseURL']

                  response_body = {}
                  response_body['Status'] = response_status
                  response_body['Reason'] = reason_data + ' See the details in CloudWatch Log Stream: ' + \
                                            context.log_stream_name
                  if 'PhysicalResourceId' in event:
                      response_body['PhysicalResourceId'] = event['PhysicalResourceId']
                  else:
                      response_body['PhysicalResourceId'] = context.log_stream_name
                  response_body['StackId'] = event['StackId']
                  response_body['RequestId'] = event['RequestId']
                  response_body['LogicalResourceId'] = event['LogicalResourceId']
                  response_body['Data'] = response_data

                  json_responsebody = json.dumps(response_body)

                  print("Response body:{}".format(json_responsebody))

                  headers = {
                      'content-type': '',
                      'content-length': str(len(json_responsebody))
                  }

                  try:
                      response = requests.put(response_url,
                                              data=json_responsebody,
                                              headers=headers)
                      print("Status code:{} ".format(response.reason))
                  except Exception as exception:
                      print("send(..) failed executing requests.put(..):{} ".format(str(exception)))

          def delete_document(ssm_client,name):
              try:
                  response = ssm_client.delete_document(Name=name)
                  if response:
                      return True
                  else:
                      raise f"SOmething went wrong in deleting document {name}"
              except Exception as ex:
                  raise ex

          def create_document(ssm_client,name,content):
              try:
                  print(f"Inside create document {name}")
                  ssm_response = ssm_client.create_document(
                              Content=content,
                              Name=name,
                              DocumentType='Automation',
                              DocumentFormat='YAML'
                          )
                  if ssm_response:
                      return True
                  else:
                      raise f"Something went wrong in create document {name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                    try:
                      ssm_response = ssm_client.update_document(
                              Content=content,
                              Name=name,
                              DocumentVersion="$LATEST",
                              DocumentFormat='YAML'
                          )
                      if ssm_response:
                          return True
                    except Exception as lastex:
                      if 'DuplicateDocumentContent' in str(lastex):
                          return True
                  elif 'DocumentLimitExceeded' in str(ex):
                      raise "Document limit exceeded. Please delete few documents"
                  raise ex

          def next_weekday(weekday_name,next_day):
              # Days of the week mapping (Monday is 0, Sunday is 6)
              weekdays = {"Monday": 0, "Tuesday": 1, "Wednesday": 2, "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6}
              today = datetime.today()
              today_weekday = today.weekday()
              target_weekday = weekdays[weekday_name]
              if not next_day:
                  if today_weekday < target_weekday:
                      days_to_next = target_weekday - today_weekday
                  else:
                      days_to_next = 7 - today_weekday + target_weekday
                  next_occurrence = today + timedelta(days=days_to_next)
              else:
                  days_until_saturday = (target_weekday - today_weekday + 7) % 7 + 7
                  next_occurrence = today + timedelta(days=days_until_saturday)
              return next_occurrence.strftime("%Y-%m-%d")

          def get_start_end_date(StartWeekDay,StopWeekDay,next_day):
              try:
                  return next_weekday(StartWeekDay,next_day),next_weekday(StopWeekDay,next_day)
              except Exception as ex:
                  print(ex)
                  raise ex
              
          def delete_caledar(ResourceProperties):
              try:
                  print("Inside delete calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  calendar_name =f"Cloud-Engineering-{ResourceProperties['ResourceType']}-scheduler-{ResourceProperties['TagKey']}-{ResourceProperties['TagValue']}-{ResourceProperties['UID']}"
                  response = ssm_client.delete_document(Name=calendar_name)
                  if response:
                      return SUCCESS
                  else:
                      raise f"SOmething went wrong in deleting document Solvnetum calendar document"
              except Exception as ex:
                  raise ex
              
          def update_caledar(ResourceProperties,calendar_name):
              
              try:
                  print("Inside update calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  try:
                    ssm_response = ssm_client.update_document(
                                Content=icalendar,
                                Name=calendar_name,
                                DocumentVersion="$LATEST",
                                DocumentFormat='TEXT'
                            )
                    if ssm_response:
                        return SUCCESS
                  except Exception as lastex:
                    if 'DuplicateDocumentContent' in str(lastex):
                        return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
                  
              except Exception as ex:
                  raise ex


              
          def create_caledar(ResourceProperties,calendar_name):
              try:
                  print("Inside Create calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  ssm_response = ssm_client.create_document(
                              Content=icalendar,
                              Name=calendar_name,
                              DocumentType='ChangeCalendar',
                              DocumentFormat='TEXT'
                          )
                  if ssm_response:
                      return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                    try:
                      ssm_response = ssm_client.update_document(
                              Content=icalendar,
                              Name=calendar_name,
                              DocumentVersion="$LATEST",
                              DocumentFormat='TEXT'
                          )
                      if ssm_response:
                          return SUCCESS
                    except Exception as lastex:
                      if 'DuplicateDocumentContent' in str(lastex):
                          return SUCCESS
                  raise ex

          def create_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  startassocdocument = """
                  description: |
                    ### Document Name - StartStateManagerAssociations
                    ## What does this document do?
                    This document starts the State Manager Association

                    ## Input Parameters
                    * AutomationAssumeRole: (Required) The ARN of the IAM role that this runboon will use to execution automation.
                    * Association IDs: (Required) The association IDs that you want to run immediately and only one time.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    AssociationIDs:
                      type: StringList
                      description: List of the State Manager Association IDs to start
                    AutomationAssumeRole:
                      type: String
                      description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
                  mainSteps:
                    - name: StartAssociation
                      action: aws:executeAwsApi
                      inputs:
                        Service: ssm
                        Api: StartAssociationsOnce
                        AssociationIds: '{{ AssociationIDs }}'
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-association-Document-RDS",startassocdocument)
                  start = """
                  description: |
                    ### Document Name - RDSStartSSMDocument
                    ## What does this document do?
                    This document finds the tagged RDS instances and start them.

                    ## Input Parameters
                    * TagKey: (Required) Tag Key to filter list of RDS Instances
                    * TagValue: (Required) Tag Value to filter list of RDS Instances
                    * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    TargetTagKey:
                      type: String
                      description: (Required) The tag name (key) to filter list of RDS Instances
                    TargetTagValue:
                      type: String
                      description: (Required) The change calendar name to filter list of RDS Instances
                    AutomationAssumeRole:
                      type: String
                      description: Automation role to be used by the runbook
                      default: ''
                    ChangeCalendarName:
                      type: String
                      description: Name of change calendar to use
                      default: ''
                  outputs:
                    - startInstances.OutputPayload
                  mainSteps:
                    - name: startInstances
                      description: Start the selected instances
                      maxAttempts: 3
                      action: aws:executeScript
                      timeoutSeconds: 600
                      onFailure: Abort
                      inputs:
                        Runtime: python3.8
                        Handler: start_instances
                        InputPayload:
                          tagKey: '{{TargetTagKey}}'
                          tagValue: '{{TargetTagValue}}'
                          changeCalendarName: '{{ChangeCalendarName}}'
                        Script: |
                          def start_instances(events, context):
                              import boto3
                              import time

                              # Initialize boto clients
                              # rds_resource = boto3.resource('ec2')
                              rds_client = boto3.client('rds')
                              ssm_client = boto3.client('ssm')

                              # Get input values to the script
                              tag_key = events['tagKey']
                              tag_value = events['tagValue']
                              change_calendar_name = events['changeCalendarName']

                              # Define the constant batch size for number of instances started/stopped in one boto call
                              batch_size = 1000

                              def get_calendar_state(calendar_name):
                                  return ssm_client.get_calendar_state(
                                      CalendarNames=[calendar_name]
                                  )

                              def get_tagged_instance_ids():
                                  rds_response = rds_client.describe_db_instances()
                                  instances = rds_response['DBInstances']
                                  while 'Marker' in rds_response.keys():
                                      rds_response = rds_client.describe_db_instances(Marker=rds_response['Marker'])
                                      instances.extend(rds_response['DBInstances'])
                                  filtered_rds = []
                                  for rds in instances:
                                      tag_response = rds_client.list_tags_for_resource(ResourceName=rds['DBInstanceArn'])
                                      for tag in tag_response['TagList']:
                                          if tag['Key'] == tag_key and tag["Value"] == tag_value:
                                              filtered_rds.append(rds['DBInstanceIdentifier'])

                                  return filtered_rds

                              def start_tagged_instances(rds_list):
                                  for instance in rds_list:
                                      rds_start_response = rds_client.start_db_instance(DBInstanceIdentifier=instance)

                              calendar_state = get_calendar_state(change_calendar_name)
                              if calendar_state.get('State') == 'OPEN':
                                  list_tagged_instance_ids = get_tagged_instance_ids()
                                  #batches = create_batches(list_tagged_instance_ids)
                                  start_tagged_instances(list_tagged_instance_ids)
                                  return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-SSM-Document-RDS",start)
                  stop = """
                  description: |
                    ### Document Name - RDSStopSSMDocument
                    ## What does this document do?
                    This document finds the tagged RDS instances and stops them.

                    ## Input Parameters
                    * TargetTagKey: (Required) Tag Key to filter list of RDS Instances
                    * TagValue: (Required) Tag Value to filter list of RDS Instances
                    * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    TargetTagKey:
                      type: String
                      description: (Required) The tag name (key) to filter list of RDS Instances
                    TargetTagValue:
                      type: String
                      description: (Required) The change calendar name (tag value) to filter list of RDS Instances
                    AutomationAssumeRole:
                      type: String
                      description: Automation role to be used by the runbook
                      default: ''
                    ChangeCalendarName:
                      type: String
                      description: Name of change calendar to use
                      default: ''
                  outputs:
                    - stopInstances.OutputPayload
                  mainSteps:
                    - name: stopInstances
                      description: Start the selected instances
                      maxAttempts: 3
                      action: aws:executeScript
                      timeoutSeconds: 600
                      onFailure: Abort
                      inputs:
                        Runtime: python3.8
                        Handler: stop_instances
                        InputPayload:
                          tagKey: '{{TargetTagKey}}'
                          tagValue: '{{TargetTagValue}}'
                          changeCalendarName: '{{ChangeCalendarName}}'
                        Script: |
                          def stop_instances(events, context):
                              import boto3
                              import time

                              # Initialize boto clients
                              # rds_resource = boto3.resource('ec2')
                              rds_client = boto3.client('rds')
                              ssm_client = boto3.client('ssm')

                              # Get input values to the script
                              tag_key = events['tagKey']
                              tag_value = events['tagValue']
                              change_calendar_name = events['changeCalendarName']

                              # Define the constant batch size for number of instances started/stopped in one boto call
                              batch_size = 1000

                              def get_calendar_state(calendar_name):
                                  return ssm_client.get_calendar_state(
                                      CalendarNames=[calendar_name]
                                  )

                              def get_tagged_instance_ids():
                                  rds_response = rds_client.describe_db_instances()
                                  instances = rds_response['DBInstances']
                                  while 'Marker' in rds_response.keys():
                                      rds_response = rds_client.describe_db_instances(Marker=rds_response['Marker'])
                                      instances.extend(rds_response['DBInstances'])
                                  filtered_rds = []
                                  for rds in instances:
                                      if rds['DBInstanceStatus'] in ['available']:
                                      #if rds['DBInstanceStatus'] not in ['stopping','stopped','rebooting','deleting','failed','Creating']:
                                          tag_response = rds_client.list_tags_for_resource(ResourceName=rds['DBInstanceArn'])
                                          for tag in tag_response['TagList']:
                                              if tag['Key'] == tag_key and tag["Value"] == tag_value:
                                                  filtered_rds.append(rds['DBInstanceIdentifier'])

                                  return filtered_rds

                              def stop_tagged_instances(rds_list):
                                  for instance in rds_list:
                                      rds_start_response = rds_client.stop_db_instance(DBInstanceIdentifier=instance)

                              calendar_state = get_calendar_state(change_calendar_name)
                              if calendar_state.get('State') == 'CLOSED':
                                  list_tagged_instance_ids = get_tagged_instance_ids()
                                  #batches = create_batches(list_tagged_instance_ids)
                                  stop_tagged_instances(list_tagged_instance_ids)
                                  return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document-RDS",stop)
                  return SUCCESS
                  #create_document(name,content)
              except Exception as ex:
                  raise ex
          def create_ssm_explorer(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  accountid = boto3.client('sts').get_caller_identity()["Account"]
                  describe_respons = ssm_client.list_associations(
                              AssociationFilterList=[
                                  {
                                      'key': 'AssociationName',
                                      'value': 'Cloud-Engineering-Scheduler-SSM-EnableExplore'
                                  }
                              ])
                  if len(describe_respons['Associations']) > 0:
                      return True
                  ssm_response = ssm_client.create_association(
                          Name="AWS-EnableExplorer",AssociationName="Cloud-Engineering-Scheduler-SSM-EnableExplorer",Parameters={"AutomationAssumeRole": [f"arn:aws:iam::{accountid}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-{ResourceProperties['ResourceType']}"]})
                  if ssm_response:
                      return True
                  else:
                      raise "SOmething went wrong in creating ssm explorer"
              except Exception as ex:
                  if 'AssociationAlreadyExists' in str(ex):
                      return True
                  raise ex

          def delete_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  delete_document(ssm_client,"Cloud-Engineering-start-SSM-Document")
                  delete_document(ssm_client,"Cloud-Engineering-start-association-Document")
                  delete_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document")
                  return SUCCESS
              except Exception as ex:
                  raise ex

          def lambda_handler(event,context):
              try:
                  print(event)
                  response_data = {}
                  print("Received a {} Request".format(event['RequestType']))
                  calendar_name =f"Cloud-Engineering-{event['ResourceProperties']['ResourceType']}-scheduler-{event['ResourceProperties']['TagKey']}-{event['ResourceProperties']['TagValue']}-{event['ResourceProperties']['UID']}"
                  if event['RequestType'] == 'Create':
                      response_data["EnablerAssociation"] =  create_ssm_explorer(event['ResourceProperties'])
                      response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                      response_data["DocumentCreated"] =  create_all_document(event["ResourceProperties"])

                  elif event['RequestType'] == 'Update':
                      if event['ResourceProperties'] != event['OldResourceProperties']:
                          print("Inside checking the resource property")
                          if event['ResourceProperties']['TagValue'] != event['OldResourceProperties']['TagValue'] or event['ResourceProperties']['TagKey'] != event['OldResourceProperties']['TagKey']:
                              print("There is a difference in tags")
                              response_data["CalendarUpdated"] = delete_caledar(event["OldResourceProperties"])
                              response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                          else:
                              response_data["CalendarUpdated"] =  update_caledar(event['ResourceProperties'],calendar_name)
                              #response_data["DocumentUpdated"] =  SUCCESS
                      else:
                          response_data["CalendarUpdated"] = SUCCESS
                      response_data["DocumentUpdated"] = create_all_document(event["ResourceProperties"])
                  elif event['RequestType'] == 'Delete':
                      response_data["CalendarDeleted"] =  delete_caledar(event["ResourceProperties"])
                      #response_data["DocumentDeleted"] =  delete_all_document(event["ResourceProperties"])

                  send(event, context, SUCCESS, response_data, "All good \n ")
              except Exception as ex:
                  print(ex)
                  response_data = {
                      "CalendarCreated": "FAILED",
                      "AssociationCreated": "FAILED",
                      "DocumentCreated": "FAILED"
                  }
                  reason_data = "Something went wrong in the beginning of the lambda"
                  send(event, context, FAILED, response_data, reason_data)
                  return True
                    
      Description: Lambda Function to create a tag for the account
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-custom-resource-creation-role-${ResourceType}'
      Runtime: python3.12
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:${PANDASLibraryName}:${PANDASLibraryVersion}'
      Timeout: 900
      MemorySize: 10240

  CFNWaiterCustomResourcerds:
    Type: "AWS::CloudFormation::CustomResource"
    Condition: RDS
    DependsOn: customlambdards
    Properties:
      ServiceToken: !GetAtt customlambdards.Arn
      StopTime: !Ref StopTime
      StartTime: !Ref StartTime
      ScheduleTimeZone: !Ref ScheduleTimeZone
      StopWeekDay: !Ref StopWeekDay
      StartWeekDay: !Ref StartWeekDay
      Region: !Ref AWS::Region
      ResourceType: !Ref ResourceType
      TagValue: !Ref TagValue
      TagKey: !Ref TagKey
      UID: !Ref UID

  StartAssociationrds:
    Type: AWS::SSM::Association
    Condition: RDS
    DependsOn: CFNWaiterCustomResourcerds
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StartInstances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-start-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub ${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
    

  StopAssociationrds:
    Type: AWS::SSM::Association
    Condition: RDS
    DependsOn: CFNWaiterCustomResourcerds
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StopInstances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-Stop-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub ${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
  
  StartInstancesEventRulerds:
    Type: AWS::Events::Rule
    Condition: RDS
    DependsOn: CFNWaiterCustomResourcerds
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-start-rule
      Description: This rule will start the custom ssm document to start  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - OPEN
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StartAssociationrds.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}

  StopInstancesEventRulerds:
    Type: AWS::Events::Rule
    Condition: RDS
    DependsOn: CFNWaiterCustomResourcerds
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-stop-rule
      Description: This rule will start the custom ssm document to stop  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - CLOSED
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StopAssociationrds.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}

  ######################################### ASG ######################################################################

  customlambdaasg:
    Type: AWS::Lambda::Function
    Condition: ASG
    Properties:
      FunctionName: !Sub Cloud-Engineering-custom-resource-creation-${ResourceType}-${UID}
      Code:
        ZipFile: |
          import requests
          import boto3
          import json
          from datetime import datetime, timedelta
          import random

          SUCCESS = 'SUCCESS'
          FAILED = 'FAILED'


          def send(event, context, response_status, response_data, reason_data):
                  '''
                  Send status to the cloudFormation
                  Template.
                  '''
                  print("Inside send method")
                  response_url = event['ResponseURL']

                  response_body = {}
                  response_body['Status'] = response_status
                  response_body['Reason'] = reason_data + ' See the details in CloudWatch Log Stream: ' + \
                                          context.log_stream_name
                  if 'PhysicalResourceId' in event:
                      response_body['PhysicalResourceId'] = event['PhysicalResourceId']
                  else:
                      response_body['PhysicalResourceId'] = context.log_stream_name
                  response_body['StackId'] = event['StackId']
                  response_body['RequestId'] = event['RequestId']
                  response_body['LogicalResourceId'] = event['LogicalResourceId']
                  response_body['Data'] = response_data

                  json_responsebody = json.dumps(response_body)

                  print("Response body:{}".format(json_responsebody))

                  headers = {
                      'content-type': '',
                      'content-length': str(len(json_responsebody))
                  }

                  try:
                      response = requests.put(response_url,
                                              data=json_responsebody,
                                              headers=headers)
                      print("Status code:{} ".format(response.reason))
                  except Exception as exception:
                      print("send(..) failed executing requests.put(..):{} ".format(str(exception)))

          def delete_document(ssm_client,name):
              try:
                  response = ssm_client.delete_document(Name=name)
                  if response:
                      return True
                  else:
                      raise f"SOmething went wrong in deleting document {name}"
              except Exception as ex:
                  raise ex

          def create_document(ssm_client,name,content):
              try:
                  print(f"Inside create document {name}")
                  ssm_response = ssm_client.create_document(
                              Content=content,
                              Name=name,
                              DocumentType='Automation',
                              DocumentFormat='YAML'
                          )
                  if ssm_response:
                      return True
                  else:
                      raise f"Something went wrong in create document {name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                    try:
                      ssm_response = ssm_client.update_document(
                              Content=content,
                              Name=name,
                              DocumentVersion="$LATEST",
                              DocumentFormat='YAML'
                          )
                      if ssm_response:
                          return True
                    except Exception as lastex:
                      if 'DuplicateDocumentContent' in str(lastex):
                          return True
                  elif 'DocumentLimitExceeded' in str(ex):
                      raise "Document limit exceeded. Please delete few documents"
                  raise ex

          def next_weekday(weekday_name,next_day):
              # Days of the week mapping (Monday is 0, Sunday is 6)
              weekdays = {"Monday": 0, "Tuesday": 1, "Wednesday": 2, "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6}
              today = datetime.today()
              today_weekday = today.weekday()
              target_weekday = weekdays[weekday_name]
              if not next_day:
                  if today_weekday < target_weekday:
                      days_to_next = target_weekday - today_weekday
                  else:
                      days_to_next = 7 - today_weekday + target_weekday
                  next_occurrence = today + timedelta(days=days_to_next)
              else:
                  days_until_saturday = (target_weekday - today_weekday + 7) % 7 + 7
                  next_occurrence = today + timedelta(days=days_until_saturday)
              return next_occurrence.strftime("%Y-%m-%d")

          def get_start_end_date(StartWeekDay,StopWeekDay,next_day):
              try:
                  return next_weekday(StartWeekDay,next_day),next_weekday(StopWeekDay,next_day)
              except Exception as ex:
                  print(ex)
                  raise ex
              
          def delete_caledar(ResourceProperties):
              try:
                  print("Inside delete calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  calendar_name =f"Cloud-Engineering-{ResourceProperties['ResourceType']}-scheduler-{ResourceProperties['TagKey']}-{ResourceProperties['TagValue']}-{ResourceProperties['UID']}"
                  response = ssm_client.delete_document(Name=calendar_name)
                  if response:
                      return SUCCESS
                  else:
                      raise f"SOmething went wrong in deleting document Solvnetum calendar document"
              except Exception as ex:
                  raise ex
              
          def update_caledar(ResourceProperties,calendar_name):
              
              try:
                  print("Inside update calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  try:
                    ssm_response = ssm_client.update_document(
                                Content=icalendar,
                                Name=calendar_name,
                                DocumentVersion="$LATEST",
                                DocumentFormat='TEXT'
                            )
                    if ssm_response:
                        return SUCCESS
                  except Exception as lastex:
                    if 'DuplicateDocumentContent' in str(lastex):
                        return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
                  
              except Exception as ex:
                  raise ex


              
          def create_caledar(ResourceProperties,calendar_name):
              try:
                  print("Inside Create calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  ssm_response = ssm_client.create_document(
                              Content=icalendar,
                              Name=calendar_name,
                              DocumentType='ChangeCalendar',
                              DocumentFormat='TEXT'
                          )
                  if ssm_response:
                      return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                    try:
                      ssm_response = ssm_client.update_document(
                              Content=icalendar,
                              Name=calendar_name,
                              DocumentVersion="$LATEST",
                              DocumentFormat='TEXT'
                          )
                      if ssm_response:
                          return SUCCESS
                    except Exception as lastex:
                      if 'DuplicateDocumentContent' in str(lastex):
                          return SUCCESS
                  raise ex

          def create_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  startassocdocument = """
                  description: |
                    ### Document Name - StartStateManagerAssociations
                    ## What does this document do?
                    This document starts the State Manager Association

                    ## Input Parameters
                    * AutomationAssumeRole: (Required) The ARN of the IAM role that this runboon will use to execution automation.
                    * Association IDs: (Required) The association IDs that you want to run immediately and only one time.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    AssociationIDs:
                      type: StringList
                      description: List of the State Manager Association IDs to start
                    AutomationAssumeRole:
                      type: String
                      description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
                  mainSteps:
                    - name: StartAssociation
                      action: aws:executeAwsApi
                      inputs:
                        Service: ssm
                        Api: StartAssociationsOnce
                        AssociationIds: '{{ AssociationIDs }}'
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-association-Document-ASG",startassocdocument)
                  start = """
                  description: |
                    ### Document Name - ASGStartSSMDocument
                    ## What does this document do?
                    This document finds the tagged RDS  and start them.

                    ## Input Parameters
                    * TagKey: (Required) Tag Key to filter list of ASG 
                    * TagValue: (Required) Tag Value to filter list of ASG 
                    * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    TargetTagKey:
                      type: String
                      description: (Required) The tag name (key) to filter list of ASG Instances
                    TargetTagValue:
                      type: String
                      description: (Required) The change calendar name to filter list of ASG Instances
                    AutomationAssumeRole:
                      type: String
                      description: Automation role to be used by the runbook
                      default: ''
                    ChangeCalendarName:
                      type: String
                      description: Name of change calendar to use
                      default: ''
                  outputs:
                    - startInstances.OutputPayload
                  mainSteps:
                    - name: startInstances
                      description: Start the selected instances
                      maxAttempts: 3
                      action: aws:executeScript
                      timeoutSeconds: 600
                      onFailure: Abort
                      inputs:
                        Runtime: python3.8
                        Handler: start_instances
                        InputPayload:
                          tagKey: '{{TargetTagKey}}'
                          tagValue: '{{TargetTagValue}}'
                          changeCalendarName: '{{ChangeCalendarName}}'
                        Script: |
                          def start_instances(events, context):
                              import boto3
                              import time

                              # Initialize boto clients
                              #ec2_resource = boto3.resource('ec2')
                              asg_client = boto3.client('autoscaling')
                              ssm_client = boto3.client('ssm')

                              # Get input values to the script
                              tag_key = events['tagKey']
                              tag_value = events['tagValue']
                              change_calendar_name = events['changeCalendarName']

                              # Define the constant batch size for number of instances started/stopped in one boto call
                              batch_size = 1000

                              def get_calendar_state(calendar_name):
                                  return ssm_client.get_calendar_state(
                                      CalendarNames=[calendar_name]
                                  )

                              def get_tagged_instance_ids():
                                  asgs = asg_client.describe_auto_scaling_groups(
                                              Filters=[
                                                  {
                                                      'Name': f'tag:{tag_key}',
                                                      'Values': [
                                                          'tag_value'
                                                      ]
                                                  }])

                                  return [instance['AutoScalingGroupName'] for instance in asgs['AutoScalingGroups']]


                              def start_tagged_instances(asg_list):
                                  for asg in asg_list:
                                      try:
                                          asg_resnose = asg_client.resume_processes(
                                                              AutoScalingGroupName=asg,
                                                              ScalingProcesses=[
                                                                  'Launch','Terminate','AddToLoadBalancer','AlarmNotification','AZRebalance','HealthCheck','InstanceRefresh','ReplaceUnhealthy','ScheduledActions'
                                                              ])
                                          if asg_resnose:
                                              return True
                                      except Exception:
                                          pass
                                      time.sleep(0.5)

                              calendar_state = get_calendar_state(change_calendar_name)
                              if calendar_state.get('State') == 'OPEN':
                                  list_tagged_instance_ids = get_tagged_instance_ids()
                                  start_tagged_instances(list_tagged_instance_ids)
                                  return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-SSM-Document-ASG",start)
                  stop = """
                  description: |
                    ### Document Name - ASGStopSSMDocument
                    ## What does this document do?
                    This document finds the tagged ASG  and stops them.

                    ## Input Parameters
                    * TargetTagKey: (Required) Tag Key to filter list of ASG 
                    * TagValue: (Required) Tag Value to filter list of ASG
                    * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                    TargetTagKey:
                      type: String
                      description: (Required) The tag name (key) to filter list of ASG 
                    TargetTagValue:
                      type: String
                      description: (Required) The change calendar name (tag value) to filter list of ASG 
                    AutomationAssumeRole:
                      type: String
                      description: Automation role to be used by the runbook
                      default: ''
                    ChangeCalendarName:
                      type: String
                      description: Name of change calendar to use
                      default: ''
                  outputs:
                    - stopInstances.OutputPayload
                  mainSteps:
                    - name: stopInstances
                      description: Start the selected instances
                      maxAttempts: 3
                      action: aws:executeScript
                      timeoutSeconds: 600
                      onFailure: Abort
                      inputs:
                        Runtime: python3.8
                        Handler: stop_instances
                        InputPayload:
                          tagKey: '{{TargetTagKey}}'
                          tagValue: '{{TargetTagValue}}'
                          changeCalendarName: '{{ChangeCalendarName}}'
                        Script: |
                          def stop_instances(events, context):
                                import boto3
                                import time

                                # Initialize boto clients
                                #ec2_resource = boto3.resource('ec2')
                                asg_client = boto3.client('autoscaling')
                                ssm_client = boto3.client('ssm')

                                # Get input values to the script
                                tag_key = events['tagKey']
                                tag_value = events['tagValue']
                                change_calendar_name = events['changeCalendarName']

                                # Define the constant batch size for number of instances started/stopped in one boto call
                                batch_size = 1000

                                def get_calendar_state(calendar_name):
                                    return ssm_client.get_calendar_state(
                                        CalendarNames=[calendar_name]
                                    )

                                def get_tagged_instance_ids():
                                    asgs = asg_client.describe_auto_scaling_groups(
                                                Filters=[
                                                    {
                                                        'Name': f'tag:{tag_key}',
                                                        'Values': [
                                                            'tag_value'
                                                        ]
                                                    }])

                                    return [instance['AutoScalingGroupName'] for instance in asgs['AutoScalingGroups']]


                                def stop_tagged_instances(asg_list):
                                    for asg in asg_list:
                                        try:
                                            asg_resnose = asg_client.suspend_processes(
                                                                AutoScalingGroupName=asg,
                                                                ScalingProcesses=[
                                                                    'Launch','AddToLoadBalancer','AlarmNotification','AZRebalance','HealthCheck','InstanceRefresh','ReplaceUnhealthy','ScheduledActions'
                                                                ])
                                            if asg_resnose:
                                                return True
                                        except Exception:
                                            pass
                                        time.sleep(0.5)

                                calendar_state = get_calendar_state(change_calendar_name)
                                if calendar_state.get('State') == 'CLOSED':
                                    list_tagged_instance_ids = get_tagged_instance_ids()
                                    stop_tagged_instances(list_tagged_instance_ids)
                                    return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document-ASG",stop)
                  return SUCCESS
                  #create_document(name,content)
              except Exception as ex:
                  raise ex

          def create_ssm_explorer(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  accountid = boto3.client('sts').get_caller_identity()["Account"]
                  describe_respons = ssm_client.list_associations(
                              AssociationFilterList=[
                                  {
                                      'key': 'AssociationName',
                                      'value': 'Cloud-Engineering-Scheduler-SSM-EnableExplore'
                                  }
                              ])
                  if len(describe_respons['Associations']) > 0:
                      return True
                  ssm_response = ssm_client.create_association(
                          Name="AWS-EnableExplorer",AssociationName="Cloud-Engineering-Scheduler-SSM-EnableExplorer",Parameters={"AutomationAssumeRole": [f"arn:aws:iam::{accountid}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-{ResourceProperties['ResourceType']}"]})
                  if ssm_response:
                      return True
                  else:
                      raise "SOmething went wrong in creating ssm explorer"
              except Exception as ex:
                  if 'AssociationAlreadyExists' in str(ex):
                      return True
                  raise ex
          def delete_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  delete_document(ssm_client,"Cloud-Engineering-start-SSM-Document")
                  delete_document(ssm_client,"Cloud-Engineering-start-association-Document")
                  delete_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document")
                  return SUCCESS
              except Exception as ex:
                  raise ex

          def lambda_handler(event,context):
              try:
                  print(event)
                  response_data = {}
                  print("Received a {} Request".format(event['RequestType']))
                  calendar_name =f"Cloud-Engineering-{event['ResourceProperties']['ResourceType']}-scheduler-{event['ResourceProperties']['TagKey']}-{event['ResourceProperties']['TagValue']}-{event['ResourceProperties']['UID']}"
                  if event['RequestType'] == 'Create':
                      response_data["EnablerAssociation"] =  create_ssm_explorer(event['ResourceProperties'])
                      response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                      response_data["DocumentCreated"] =  create_all_document(event["ResourceProperties"])

                  elif event['RequestType'] == 'Update':
                      if event['ResourceProperties'] != event['OldResourceProperties']:
                          if event['ResourceProperties']['TagValue'] != event['OldResourceProperties']['TagValue'] or event['ResourceProperties']['TagKey'] != event['OldResourceProperties']['TagKey']:
                              print("There is a difference in tags")
                              response_data["CalendarUpdated"] = delete_caledar(event["OldResourceProperties"])
                              response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                          else:
                              response_data["CalendarUpdated"] =  update_caledar(event['ResourceProperties'],calendar_name)
                              #response_data["DocumentUpdated"] =  SUCCESS
                      else:
                          response_data["CalendarUpdated"] = SUCCESS
                      response_data["DocumentUpdated"] = create_all_document(event["ResourceProperties"])
                  elif event['RequestType'] == 'Delete':
                      response_data["CalendarDeleted"] =  delete_caledar(event["ResourceProperties"])
                      #response_data["DocumentDeleted"] =  delete_all_document(event["ResourceProperties"])

                  send(event, context, SUCCESS, response_data, "All good \n ")
              except Exception as ex:
                  print(ex)
                  response_data = {
                      "CalendarCreated": "FAILED",
                      "AssociationCreated": "FAILED",
                      "DocumentCreated": "FAILED"
                  }
                  reason_data = "Something went wrong in the beginning of the lambda"
                  send(event, context, FAILED, response_data, reason_data)
                  return True
                    
      Description: Lambda Function to create a tag for the account
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-custom-resource-creation-role-${ResourceType}'
      Runtime: python3.12
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:${PANDASLibraryName}:${PANDASLibraryVersion}'
      Timeout: 900
      MemorySize: 10240

  CFNWaiterCustomResourceasg:
    Type: "AWS::CloudFormation::CustomResource"
    Condition: ASG
    DependsOn: customlambdaasg
    Properties:
      ServiceToken: !GetAtt customlambdaasg.Arn
      StopTime: !Ref StopTime
      StartTime: !Ref StartTime
      ScheduleTimeZone: !Ref ScheduleTimeZone
      StopWeekDay: !Ref StopWeekDay
      StartWeekDay: !Ref StartWeekDay
      Region: !Ref AWS::Region
      ResourceType: !Ref ResourceType
      TagValue: !Ref TagValue
      TagKey: !Ref TagKey
      UID: !Ref UID

  StartAssociationasg:
    Type: AWS::SSM::Association
    Condition: ASG
    DependsOn: CFNWaiterCustomResourceasg
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StartInstances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-start-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub ${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
    

  StopAssociationasg:
    Type: AWS::SSM::Association
    Condition: ASG
    DependsOn: CFNWaiterCustomResourceasg
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StopInstances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-Stop-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub ${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
  
  StartInstancesEventRuleasg:
    Type: AWS::Events::Rule
    Condition: ASG
    DependsOn: CFNWaiterCustomResourceasg
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-start-rule
      Description: This rule will start the custom ssm document to start  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - OPEN
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StartAssociationasg.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}

  StopInstancesEventRuleasg:
    Type: AWS::Events::Rule
    Condition: ASG
    DependsOn: CFNWaiterCustomResourceasg
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-stop-rule
      Description: This rule will start the custom ssm document to stop  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - CLOSED
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StopAssociationasg.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}
  ###################################################### RDS Cluster ##################################################
  customlambdardscluster:
    Type: AWS::Lambda::Function
    Condition: Cluster
    Properties:
      FunctionName: !Sub Cloud-Engineering-custom-resource-creation-${ResourceType}-${UID}
      Code:
        ZipFile: |
          import requests
          import boto3
          import json
          from datetime import datetime, timedelta
          import random

          SUCCESS = 'SUCCESS'
          FAILED = 'FAILED'


          def send(event, context, response_status, response_data, reason_data):
              '''
              Send status to the cloudFormation
              Template.
              '''
              print("Inside send method")
              response_url = event['ResponseURL']

              response_body = {}
              response_body['Status'] = response_status
              response_body['Reason'] = reason_data + ' See the details in CloudWatch Log Stream: ' + \
                                      context.log_stream_name
              if 'PhysicalResourceId' in event:
                  response_body['PhysicalResourceId'] = event['PhysicalResourceId']
              else:
                  response_body['PhysicalResourceId'] = context.log_stream_name
              response_body['StackId'] = event['StackId']
              response_body['RequestId'] = event['RequestId']
              response_body['LogicalResourceId'] = event['LogicalResourceId']
              response_body['Data'] = response_data

              json_responsebody = json.dumps(response_body)

              print("Response body:{}".format(json_responsebody))

              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responsebody))
              }

              try:
                  response = requests.put(response_url,
                                          data=json_responsebody,
                                          headers=headers)
                  print("Status code:{} ".format(response.reason))
              except Exception as exception:
                  print("send(..) failed executing requests.put(..):{} ".format(str(exception)))

          def delete_document(ssm_client,name):
              try:
                  response = ssm_client.delete_document(Name=name)
                  if response:
                      return True
                  else:
                      raise f"SOmething went wrong in deleting document {name}"
              except Exception as ex:
                  raise ex

          def create_document(ssm_client,name,content):
              try:
                  print(f"Inside create document {name}")
                  ssm_response = ssm_client.create_document(
                              Content=content,
                              Name=name,
                              DocumentType='Automation',
                              DocumentFormat='YAML'
                          )
                  if ssm_response:
                      return True
                  else:
                      raise f"Something went wrong in create document {name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                      try:
                          ssm_response = ssm_client.update_document(
                                  Content=content,
                                  Name=name,
                                  DocumentVersion="$LATEST",
                                  DocumentFormat='YAML'
                              )
                          if ssm_response:
                              return True
                      except Exception as lastex:
                          if 'DuplicateDocumentContent' in str(lastex):
                              return True
                  elif 'DocumentLimitExceeded' in str(ex):
                      raise "Document limit exceeded. Please delete few documents"
                  raise ex

          def next_weekday(weekday_name,next_day):
              # Days of the week mapping (Monday is 0, Sunday is 6)
              weekdays = {"Monday": 0, "Tuesday": 1, "Wednesday": 2, "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6}
              today = datetime.today()
              today_weekday = today.weekday()
              target_weekday = weekdays[weekday_name]
              if not next_day:
                  if today_weekday < target_weekday:
                      days_to_next = target_weekday - today_weekday
                  else:
                      days_to_next = 7 - today_weekday + target_weekday
                  next_occurrence = today + timedelta(days=days_to_next)
              else:
                  days_until_saturday = (target_weekday - today_weekday + 7) % 7 + 7
                  next_occurrence = today + timedelta(days=days_until_saturday)
              return next_occurrence.strftime("%Y-%m-%d")

          def get_start_end_date(StartWeekDay,StopWeekDay,next_day):
              try:
                  return next_weekday(StartWeekDay,next_day),next_weekday(StopWeekDay,next_day)
              except Exception as ex:
                  print(ex)
                  raise ex
              
          def delete_caledar(ResourceProperties):
              try:
                  print("Inside delete calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  calendar_name =f"Cloud-Engineering-{ResourceProperties['ResourceType']}-scheduler-{ResourceProperties['TagKey']}-{ResourceProperties['TagValue']}-{ResourceProperties['UID']}"
                  response = ssm_client.delete_document(Name=calendar_name)
                  if response:
                      return SUCCESS
                  else:
                      raise f"SOmething went wrong in deleting document Solvnetum calendar document"
              except Exception as ex:
                  raise ex
              
          def update_caledar(ResourceProperties,calendar_name):
              
              try:
                  print("Inside update calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  try:
                      ssm_response = ssm_client.update_document(
                                  Content=icalendar,
                                  Name=calendar_name,
                                  DocumentVersion="$LATEST",
                                  DocumentFormat='TEXT'
                              )
                      if ssm_response:
                          return SUCCESS
                  except Exception as lastex:
                      if 'DuplicateDocumentContent' in str(lastex):
                          return SUCCESS
                      else:
                          raise f"Something went wrong in create document {calendar_name}"
                  
              except Exception as ex:
                  raise ex


              
          def create_caledar(ResourceProperties,calendar_name):
              try:
                  print("Inside Create calendar")
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  StartTime = ResourceProperties['StartTime'].replace(":","")
                  StopTime = ResourceProperties['StopTime'].replace(":","")
                  StartWeekDay = ResourceProperties['StartWeekDay']
                  StopWeekDay = ResourceProperties['StopWeekDay']
                  StartDate, Enddate = get_start_end_date(StartWeekDay,StopWeekDay,None)
                  if StartDate > Enddate:
                      Enddate = next_weekday(StopWeekDay,True)
                  icalendar = f"""BEGIN:VCALENDAR\nX-CALENDAR-TYPE:DEFAULT_CLOSED\nVERSION:2.0\nPRODID:-//AWS//Change Calendar 1.0//EN\nBEGIN:VEVENT\nUID:{str(random.randint(100000000, 200000000))}\nSEQUENCE:0\nDTSTAMP:{str(datetime.today().strftime("%Y%m%d"))}Z\nDTSTART;TZID={ResourceProperties['ScheduleTimeZone']}:{str(StartDate).replace("-","")}T{StartTime}\nDTEND;TZID={ResourceProperties['ScheduleTimeZone']}:{str(Enddate).replace("-","")}T{StopTime}\nRRULE:FREQ=WEEKLY;\nSUMMARY: {ResourceProperties['ResourceType']} {ResourceProperties['TagKey']} {ResourceProperties['ScheduleTimeZone']} Calender\nEND:VEVENT\nEND:VCALENDAR"""
                  ssm_response = ssm_client.create_document(
                              Content=icalendar,
                              Name=calendar_name,
                              DocumentType='ChangeCalendar',
                              DocumentFormat='TEXT'
                          )
                  if ssm_response:
                      return SUCCESS
                  else:
                      raise f"Something went wrong in create document {calendar_name}"
              except Exception as ex:
                  if 'DuplicateDocumentContent' in str(ex):
                      return True
                  if 'DocumentAlreadyExists' in str(ex):
                      try:
                          ssm_response = ssm_client.update_document(
                                  Content=icalendar,
                                  Name=calendar_name,
                                  DocumentVersion="$LATEST",
                                  DocumentFormat='TEXT'
                              )
                          if ssm_response:
                              return SUCCESS
                      except Exception as lastex:
                          if 'DuplicateDocumentContent' in str(lastex):
                              return SUCCESS
                  raise ex

          def create_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  startassocdocument = """
                  description: |
                      ### Document Name - StartStateManagerAssociations
                      ## What does this document do?
                      This document starts the State Manager Association

                      ## Input Parameters
                      * AutomationAssumeRole: (Required) The ARN of the IAM role that this runboon will use to execution automation.
                      * Association IDs: (Required) The association IDs that you want to run immediately and only one time.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                      AssociationIDs:
                          type: StringList
                          description: List of the State Manager Association IDs to start
                      AutomationAssumeRole:
                          type: String
                          description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
                  mainSteps:
                      - name: StartAssociation
                        action: aws:executeAwsApi
                        inputs:
                          Service: ssm
                          Api: StartAssociationsOnce
                          AssociationIds: '{{ AssociationIDs }}'
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-association-Document-RDS-Cluster",startassocdocument)
                  start = """
                  description: |
                      ### Document Name - RDSClusterStartSSMDocument
                      ## What does this document do?
                      This document finds the tagged RDS instances and start them.

                      ## Input Parameters
                      * TagKey: (Required) Tag Key to filter list of RDS Cluster Instances
                      * TagValue: (Required) Tag Value to filter list of RDS Cluster Instances
                      * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                      TargetTagKey:
                          type: String
                          description: (Required) The tag name (key) to filter list of RDS Instances
                      TargetTagValue:
                          type: String
                          description: (Required) The change calendar name to filter list of RDS Instances
                      AutomationAssumeRole:
                          type: String
                          description: Automation role to be used by the runbook
                          default: ''
                      ChangeCalendarName:
                          type: String
                          description: Name of change calendar to use
                          default: ''
                  outputs:
                      - startInstances.OutputPayload
                  mainSteps:
                      - name: startInstances
                        description: Start the selected instances
                        maxAttempts: 3
                        action: aws:executeScript
                        timeoutSeconds: 600
                        onFailure: Abort
                        inputs:
                          Runtime: python3.8
                          Handler: start_instances
                          InputPayload:
                              tagKey: '{{TargetTagKey}}'
                              tagValue: '{{TargetTagValue}}'
                              changeCalendarName: '{{ChangeCalendarName}}'
                          Script: |
                              def start_instances(events, context):
                                  import boto3
                                  import time

                                  # Initialize boto clients
                                  # rds_resource = boto3.resource('ec2')
                                  rds_client = boto3.client('rds')
                                  ssm_client = boto3.client('ssm')

                                  # Get input values to the script
                                  tag_key = events['tagKey']
                                  tag_value = events['tagValue']
                                  change_calendar_name = events['changeCalendarName']

                                  # Define the constant batch size for number of instances started/stopped in one boto call
                                  batch_size = 1000

                                  def get_calendar_state(calendar_name):
                                      return ssm_client.get_calendar_state(
                                          CalendarNames=[calendar_name]
                                      )

                                  def get_tagged_instance_ids():
                                      rds_response = rds_client.describe_db_clusters()
                                      instances = rds_response['DBClusters']
                                      while 'Marker' in rds_response.keys():
                                          rds_response = rds_client.describe_db_clusters(Marker=rds_response['Marker'])
                                          instances.extend(rds_response['DBClusters'])
                                      filtered_rds = []
                                      for rds in instances:
                                          for tag in rds['TagList']:
                                              if tag['Key'] == tag_key and tag["Value"] == tag_value:
                                                  filtered_rds.append(rds['DBClusterIdentifier'])

                                      return filtered_rds

                                  def start_tagged_instances(rds_list):
                                      for instance in rds_list:
                                          rds_start_response = rds_client.start_db_cluster(DBClusterIdentifier=instance)

                                  calendar_state = get_calendar_state(change_calendar_name)
                                  if calendar_state.get('State') == 'OPEN':
                                      list_tagged_instance_ids = get_tagged_instance_ids()
                                      #batches = create_batches(list_tagged_instance_ids)
                                      start_tagged_instances(list_tagged_instance_ids)
                                      return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-start-SSM-Document-RDS-Cluster",start)
                  stop = """
                  description: |
                      ### Document Name - RDSCLusterStopSSMDocument
                      ## What does this document do?
                      This document finds the tagged RDS-Cluster instances and stops them.

                      ## Input Parameters
                      * TargetTagKey: (Required) Tag Key to filter list of RDS-Cluster Instances
                      * TagValue: (Required) Tag Value to filter list of RDS-Cluster Instances
                      * ResourceTagMapList: (Required) The tags to add to the resources.
                  schemaVersion: '0.3'
                  assumeRole: '{{ AutomationAssumeRole }}'
                  parameters:
                      TargetTagKey:
                          type: String
                          description: (Required) The tag name (key) to filter list of RDS Instances
                      TargetTagValue:
                          type: String
                          description: (Required) The change calendar name (tag value) to filter list of RDS Instances
                      AutomationAssumeRole:
                          type: String
                          description: Automation role to be used by the runbook
                          default: ''
                      ChangeCalendarName:
                          type: String
                          description: Name of change calendar to use
                          default: ''
                  outputs:
                      - stopInstances.OutputPayload
                  mainSteps:
                      - name: stopInstances
                        description: Start the selected instances
                        maxAttempts: 3
                        action: aws:executeScript
                        timeoutSeconds: 600
                        onFailure: Abort
                        inputs:
                          Runtime: python3.8
                          Handler: stop_instances
                          InputPayload:
                              tagKey: '{{TargetTagKey}}'
                              tagValue: '{{TargetTagValue}}'
                              changeCalendarName: '{{ChangeCalendarName}}'
                          Script: |
                              def stop_instances(events, context):
                                  import boto3
                                  import time

                                  rds_client = boto3.client('rds')
                                  ssm_client = boto3.client('ssm')

                                  # Get input values to the script
                                  tag_key = events['tagKey']
                                  tag_value = events['tagValue']
                                  change_calendar_name = events['changeCalendarName']

                                  # Define the constant batch size for number of instances started/stopped in one boto call
                                  batch_size = 1000

                                  def get_calendar_state(calendar_name):
                                      return ssm_client.get_calendar_state(
                                          CalendarNames=[calendar_name]
                                      )

                                  def get_tagged_instance_ids():
                                      rds_response = rds_client.describe_db_clusters()
                                      instances = rds_response['DBClusters']
                                      while 'Marker' in rds_response.keys():
                                          rds_response = rds_client.describe_db_clusters(Marker=rds_response['Marker'])
                                          instances.extend(rds_response['DBClusters'])
                                      filtered_rds = []
                                      for rds in instances:
                                        if rds['Status'] in ['available']:
                                          for tag in rds['TagList']:
                                              if tag['Key'] == tag_key and tag["Value"] == tag_value:
                                                  filtered_rds.append(rds['DBClusterIdentifier'])

                                      return filtered_rds

                                  def stop_tagged_instances(rds_list):
                                      for instance in rds_list:
                                          rds_client.stop_db_cluster(DBClusterIdentifier=instance)

                                  calendar_state = get_calendar_state(change_calendar_name)
                                  if calendar_state.get('State') == 'CLOSED':
                                      list_tagged_instance_ids = get_tagged_instance_ids()
                                      #batches = create_batches(list_tagged_instance_ids)
                                      stop_tagged_instances(list_tagged_instance_ids)
                                      return list_tagged_instance_ids
                  """
                  create_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document-RDS-Cluster",stop)
                  return SUCCESS
                  #create_document(name,content)
              except Exception as ex:
                  raise ex
          def create_ssm_explorer(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  accountid = boto3.client('sts').get_caller_identity()["Account"]
                  describe_respons = ssm_client.list_associations(
                              AssociationFilterList=[
                                  {
                                      'key': 'AssociationName',
                                      'value': 'Cloud-Engineering-Scheduler-SSM-EnableExplore'
                                  }
                              ])
                  if len(describe_respons['Associations']) > 0:
                      return True
                  ssm_response = ssm_client.create_association(
                          Name="AWS-EnableExplorer",AssociationName="Cloud-Engineering-Scheduler-SSM-EnableExplorer",Parameters={"AutomationAssumeRole": [f"arn:aws:iam::{accountid}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-{ResourceProperties['ResourceType']}"]})
                  if ssm_response:
                      return True
                  else:
                      raise "SOmething went wrong in creating ssm explorer"
              except Exception as ex:
                  if 'AssociationAlreadyExists' in str(ex):
                      return True
                  raise ex

          def delete_all_document(ResourceProperties):
              try:
                  ssm_client = boto3.client("ssm", region_name=ResourceProperties['Region'])
                  delete_document(ssm_client,"Cloud-Engineering-start-SSM-Document")
                  delete_document(ssm_client,"Cloud-Engineering-start-association-Document")
                  delete_document(ssm_client,"Cloud-Engineering-Stop-SSM-Document")
                  return SUCCESS
              except Exception as ex:
                  raise ex

          def lambda_handler(event,context):
              try:
                  print(event)
                  response_data = {}
                  print("Received a {} Request".format(event['RequestType']))
                  calendar_name =f"Cloud-Engineering-{event['ResourceProperties']['ResourceType']}-scheduler-{event['ResourceProperties']['TagKey']}-{event['ResourceProperties']['TagValue']}-{event['ResourceProperties']['UID']}"
                  if event['RequestType'] == 'Create':
                      response_data["EnablerAssociation"] =  create_ssm_explorer(event['ResourceProperties'])
                      response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                      response_data["DocumentCreated"] =  create_all_document(event["ResourceProperties"])

                  elif event['RequestType'] == 'Update':
                      if event['ResourceProperties'] != event['OldResourceProperties']:
                          print("Inside checking the resource property")
                          if event['ResourceProperties']['TagValue'] != event['OldResourceProperties']['TagValue'] or event['ResourceProperties']['TagKey'] != event['OldResourceProperties']['TagKey']:
                              print("There is a difference in tags")
                              response_data["CalendarUpdated"] = delete_caledar(event["OldResourceProperties"])
                              response_data["CalendarCreated"] =  create_caledar(event["ResourceProperties"],calendar_name)
                          else:
                              response_data["CalendarUpdated"] =  update_caledar(event['ResourceProperties'],calendar_name)
                              #response_data["DocumentUpdated"] =  SUCCESS
                      else:
                          response_data["CalendarUpdated"] = SUCCESS
                      response_data["DocumentUpdated"] = create_all_document(event["ResourceProperties"])
                  elif event['RequestType'] == 'Delete':
                      response_data["CalendarDeleted"] =  delete_caledar(event["ResourceProperties"])
                      #response_data["DocumentDeleted"] =  delete_all_document(event["ResourceProperties"])

                  send(event, context, SUCCESS, response_data, "All good \n ")
              except Exception as ex:
                  print(ex)
                  response_data = {
                      "CalendarCreated": "FAILED",
                      "AssociationCreated": "FAILED",
                      "DocumentCreated": "FAILED"
                  }
                  reason_data = "Something went wrong in the beginning of the lambda"
                  send(event, context, FAILED, response_data, reason_data)
                  return True
                    
      Description: Lambda Function to create a tag for the account
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-custom-resource-creation-role-${ResourceType}'
      Runtime: python3.12
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:${PANDASLibraryName}:${PANDASLibraryVersion}'
      Timeout: 900
      MemorySize: 10240

  CFNWaiterCustomResourcerdscluster:
    Type: "AWS::CloudFormation::CustomResource"
    Condition: Cluster
    DependsOn: customlambdardscluster
    Properties:
      ServiceToken: !GetAtt customlambdardscluster.Arn
      StopTime: !Ref StopTime
      StartTime: !Ref StartTime
      ScheduleTimeZone: !Ref ScheduleTimeZone
      StopWeekDay: !Ref StopWeekDay
      StartWeekDay: !Ref StartWeekDay
      Region: !Ref AWS::Region
      ResourceType: !Ref ResourceType
      TagValue: !Ref TagValue
      TagKey: !Ref TagKey
      UID: !Ref UID

  StartAssociationrdscluster:
    Type: AWS::SSM::Association
    Condition: Cluster
    DependsOn: CFNWaiterCustomResourcerdscluster
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StartInstances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-start-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub ${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
    

  StopAssociationrdscluster:
    Type: AWS::SSM::Association
    Condition: Cluster
    DependsOn: CFNWaiterCustomResourcerdscluster
    Properties:
      AssociationName: !Sub Cloud-Engineering-${ResourceType}-${TagKey}-Scheduler-StopInstances-${UID}
      DocumentVersion: $LATEST
      Name: !Sub Cloud-Engineering-Stop-SSM-Document-${ResourceType}
      Parameters:
        TargetTagKey:
          - !Sub ${TagKey}
        TargetTagValue:
          - !Ref TagValue
        AutomationAssumeRole:
          - !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
        ChangeCalendarName:
          - !Sub Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
  
  StartInstancesEventRulerdscluster:
    Type: AWS::Events::Rule
    Condition: Cluster
    DependsOn: CFNWaiterCustomResourcerdscluster
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-start-rule
      Description: This rule will start the custom ssm document to start  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - OPEN
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StartAssociationrdscluster.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType}

  StopInstancesEventRulerdscluster:
    Type: AWS::Events::Rule
    Condition: Cluster
    DependsOn: CFNWaiterCustomResourcerdscluster
    Properties:
      Name: !Sub Cloud-Engineering-${ResourceType}-${UID}-stop-rule
      Description: This rule will start the custom ssm document to stop  instances
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Calendar State Change
        resources:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/Cloud-Engineering-${ResourceType}-scheduler-${TagKey}-${TagValue}-${UID}
        detail:
          state:
            - CLOSED
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/Cloud-Engineering-start-association-Document-${ResourceType}:$DEFAULT
          Id: Target0
          Input: !Sub
            - '{"AssociationIDs":["${AssociationIDs}"],"AutomationAssumeRole":["${AutomationAssumeRole}"]}'
            - AssociationIDs: !GetAtt StopAssociationrdscluster.AssociationId
              AutomationAssumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-ConfigurationRole-${ResourceType}
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/Cloud-Engineering-Resource-Scheduler-TriggerRole-${ResourceType} 
Outputs:
  EC2StartASsociation:
    Description: Start ASsociation ID
    Value: !GetAtt StartAssociation.AssociationId
    Condition: EC2
  EC2StopASsociation:
    Description: The Stop Association ID
    Value: !GetAtt StopAssociation.AssociationId
    Condition: EC2
  EC2CustomLambda:
    Description: Custom lambda ARN
    Value: !GetAtt customlambda.Arn
    Condition: EC2
  RDSStartASsociation:
    Description: Start ASsociation ID
    Value: !GetAtt StartAssociationrds.AssociationId
    Condition: RDS
  RDSStopASsociation:
    Description: The Stop Association ID
    Value: !GetAtt StopAssociationrds.AssociationId
    Condition: RDS
  rdsCustomLambda:
    Description: Custom lambda ARN
    Value: !GetAtt customlambdards.Arn
    Condition: RDS
  ASGStartASsociation:
    Description: Start ASsociation ID
    Value: !GetAtt StartAssociationasg.AssociationId
    Condition: ASG
  ASGStopASsociation:
    Description: The Stop Association ID
    Value: !GetAtt StopAssociationasg.AssociationId
    Condition: ASG
  ASGCustomLambda:
    Description: Custom lambda ARN
    Value: !GetAtt customlambdaasg.Arn
    Condition: ASG
  ClusterStartASsociation:
    Description: Start ASsociation ID
    Value: !GetAtt StartAssociationrdscluster.AssociationId
    Condition: Cluster
  ClusterStopASsociation:
    Description: The Stop Association ID
    Value: !GetAtt StopAssociationrdscluster.AssociationId
    Condition: Cluster
  ClusterCustomLambda:
    Description: Custom lambda ARN
    Value: !GetAtt customlambdardscluster.Arn
    Condition: Cluster